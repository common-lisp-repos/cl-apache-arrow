;;;; Generated by gir2cl on Mon, 04 May 2020 23:49:56 +0000

(in-package #:parquet-low-level)

(defparameter *ns* (gir:require-namespace "Parquet"))

(defclass gir-object nil
          ((native-pointer :initarg :native-pointer :reader native-pointer)))

(defclass arrow-file-reader (gir-object) (path source))

(defun make-arrow-file-reader-new-arrow (source)
  (let ((pointer (gir:invoke (*ns* "ArrowFileReader" "new_arrow") source)))
    (make-instance 'arrow-file-reader :native-pointer pointer)))

(defun make-arrow-file-reader-new-path (path)
  (let ((pointer (gir:invoke (*ns* "ArrowFileReader" "new_path") path)))
    (make-instance 'arrow-file-reader :native-pointer pointer)))

(defmethod arrow-file-reader-get-n-row-groups
           ((arrow-file-reader arrow-file-reader))
  (with-slots (native-pointer)
      arrow-file-reader
    (gir:invoke (native-pointer "get_n_row_groups"))))

(defmethod arrow-file-reader-get-schema ((arrow-file-reader arrow-file-reader))
  (with-slots (native-pointer)
      arrow-file-reader
    (gir:invoke (native-pointer "get_schema"))))

(defmethod arrow-file-reader-read-column-data
           ((arrow-file-reader arrow-file-reader) i)
  (with-slots (native-pointer)
      arrow-file-reader
    (gir:invoke (native-pointer "read_column_data") i)))

(defmethod arrow-file-reader-read-table ((arrow-file-reader arrow-file-reader))
  (with-slots (native-pointer)
      arrow-file-reader
    (gir:invoke (native-pointer "read_table"))))

(defmethod arrow-file-reader-set-use-threads
           ((arrow-file-reader arrow-file-reader) use-threads)
  (with-slots (native-pointer)
      arrow-file-reader
    (gir:invoke (native-pointer "set_use_threads") use-threads)))

(defclass arrow-file-writer (gir-object) (path schema sink writer-properties))

(defun make-arrow-file-writer-new-arrow (schema sink writer-properties)
  (let ((pointer
         (gir:invoke (*ns* "ArrowFileWriter" "new_arrow") schema sink writer-properties)))
    (make-instance 'arrow-file-writer :native-pointer pointer)))

(defun make-arrow-file-writer-new-path (schema path writer-properties)
  (let ((pointer
         (gir:invoke (*ns* "ArrowFileWriter" "new_path") schema path writer-properties)))
    (make-instance 'arrow-file-writer :native-pointer pointer)))

(defmethod arrow-file-writer-close ((arrow-file-writer arrow-file-writer))
  (with-slots (native-pointer)
      arrow-file-writer
    (gir:invoke (native-pointer "close"))))

(defmethod arrow-file-writer-write-table
           ((arrow-file-writer arrow-file-writer) table chunk-size)
  (with-slots (native-pointer)
      arrow-file-writer
    (gir:invoke (native-pointer "write_table") table chunk-size)))

(defclass parquet-writer-properties (gir-object) nil)

(defun make-parquet-writer-properties-new ()
  (let ((pointer (gir:invoke (*ns* "WriterProperties" "new"))))
    (make-instance 'parquet-writer-properties :native-pointer pointer)))

(defmethod parquet-writer-properties-disable-dictionary
           ((parquet-writer-properties parquet-writer-properties) path)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "disable_dictionary") path)))

(defmethod parquet-writer-properties-enable-dictionary
           ((parquet-writer-properties parquet-writer-properties) path)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "enable_dictionary") path)))

(defmethod parquet-writer-properties-get-batch-size
           ((parquet-writer-properties parquet-writer-properties))
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "get_batch_size"))))

(defmethod parquet-writer-properties-get-compression-path
           ((parquet-writer-properties parquet-writer-properties) path)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "get_compression_path") path)))

(defmethod parquet-writer-properties-get-data-page-size
           ((parquet-writer-properties parquet-writer-properties))
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "get_data_page_size"))))

(defmethod parquet-writer-properties-get-dictionary-page-size-limit
           ((parquet-writer-properties parquet-writer-properties))
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "get_dictionary_page_size_limit"))))

(defmethod parquet-writer-properties-get-max-row-group-length
           ((parquet-writer-properties parquet-writer-properties))
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "get_max_row_group_length"))))

(defmethod parquet-writer-properties-is-dictionary-enabled
           ((parquet-writer-properties parquet-writer-properties) path)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "is_dictionary_enabled") path)))

(defmethod parquet-writer-properties-set-batch-size
           ((parquet-writer-properties parquet-writer-properties) batch-size)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "set_batch_size") batch-size)))

(defmethod parquet-writer-properties-set-compression
           ((parquet-writer-properties parquet-writer-properties)
            compression-type path)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "set_compression") compression-type path)))

(defmethod parquet-writer-properties-set-data-page-size
           ((parquet-writer-properties parquet-writer-properties)
            data-page-size)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "set_data_page_size") data-page-size)))

(defmethod parquet-writer-properties-set-dictionary-page-size-limit
           ((parquet-writer-properties parquet-writer-properties) limit)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "set_dictionary_page_size_limit") limit)))

(defmethod parquet-writer-properties-set-max-row-group-length
           ((parquet-writer-properties parquet-writer-properties) length)
  (with-slots (native-pointer)
      parquet-writer-properties
    (gir:invoke (native-pointer "set_max_row_group_length") length)))


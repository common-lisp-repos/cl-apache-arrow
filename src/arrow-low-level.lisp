;;;; Generated by gir2cl on Mon, 04 May 2020 23:49:55 +0000

(in-package #:arrow-low-level)

(defparameter *ns* (gir:require-namespace "Arrow"))

(defclass gir-object nil
          ((native-pointer :initarg :native-pointer :reader native-pointer)))

(defclass arrow-array (gir-object) nil)

(defmethod arrow-array-cast
           ((arrow-array arrow-array) target-data-type options)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "cast") target-data-type options)))

(defmethod arrow-array-count ((arrow-array arrow-array) options)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "count") options)))

(defmethod arrow-array-count-values ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "count_values"))))

(defmethod arrow-array-dictionary-encode ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "dictionary_encode"))))

(defmethod arrow-array-diff-unified ((arrow-array arrow-array) other-array)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "diff_unified") other-array)))

(defmethod arrow-array-equal ((arrow-array arrow-array) other-array)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "equal") other-array)))

(defmethod arrow-array-equal-approx ((arrow-array arrow-array) other-array)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "equal_approx") other-array)))

(defmethod arrow-array-equal-range
           ((arrow-array arrow-array) start-index other-array other-start-index
            end-index)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "equal_range") start-index other-array
                other-start-index end-index)))

(defmethod arrow-array-filter ((arrow-array arrow-array) filter options)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "filter") filter options)))

(defmethod arrow-array-get-length ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_length"))))

(defmethod arrow-array-get-n-nulls ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_n_nulls"))))

(defmethod arrow-array-get-null-bitmap ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_null_bitmap"))))

(defmethod arrow-array-get-offset ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_offset"))))

(defmethod arrow-array-get-value-data-type ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_value_data_type"))))

(defmethod arrow-array-get-value-type ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "get_value_type"))))

(defmethod arrow-array-is-in ((arrow-array arrow-array) right)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "is_in") right)))

(defmethod arrow-array-is-in-chunked-array ((arrow-array arrow-array) right)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "is_in_chunked_array") right)))

(defmethod arrow-array-is-null ((arrow-array arrow-array) i)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "is_null") i)))

(defmethod arrow-array-is-valid ((arrow-array arrow-array) i)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "is_valid") i)))

(defmethod arrow-array-slice ((arrow-array arrow-array) offset length)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "slice") offset length)))

(defmethod arrow-array-sort-to-indices ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "sort_to_indices"))))

(defmethod arrow-array-take ((arrow-array arrow-array) indices options)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "take") indices options)))

(defmethod arrow-array-take-chunked-array
           ((arrow-array arrow-array) indices options)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "take_chunked_array") indices options)))

(defmethod arrow-array-to-string ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "to_string"))))

(defmethod arrow-array-unique ((arrow-array arrow-array))
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "unique"))))

(defmethod arrow-array-view ((arrow-array arrow-array) return-type)
  (with-slots (native-pointer)
      arrow-array
    (gir:invoke (native-pointer "view") return-type)))

(defclass array-builder (gir-object) nil)

(defmethod array-builder-finish ((array-builder array-builder))
  (with-slots (native-pointer)
      array-builder
    (gir:invoke (native-pointer "finish"))))

(defmethod array-builder-get-value-data-type ((array-builder array-builder))
  (with-slots (native-pointer)
      array-builder
    (gir:invoke (native-pointer "get_value_data_type"))))

(defmethod array-builder-get-value-type ((array-builder array-builder))
  (with-slots (native-pointer)
      array-builder
    (gir:invoke (native-pointer "get_value_type"))))

(defmethod array-builder-release-ownership ((array-builder array-builder))
  (with-slots (native-pointer)
      array-builder
    (gir:invoke (native-pointer "release_ownership"))))

(defclass binary-array (arrow-array)
          (length value-offsets data null-bitmap n-nulls))

(defun make-binary-array-new (length value-offsets data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "BinaryArray" "new") length value-offsets data null-bitmap
                     n-nulls)))
    (make-instance 'binary-array :native-pointer pointer)))

(defmethod binary-array-get-buffer ((binary-array binary-array))
  (with-slots (native-pointer)
      binary-array
    (gir:invoke (native-pointer "get_buffer"))))

(defmethod binary-array-get-offsets-buffer ((binary-array binary-array))
  (with-slots (native-pointer)
      binary-array
    (gir:invoke (native-pointer "get_offsets_buffer"))))

(defmethod binary-array-get-value ((binary-array binary-array) i)
  (with-slots (native-pointer)
      binary-array
    (gir:invoke (native-pointer "get_value") i)))

(defclass binary-array-builder (array-builder) nil)

(defun make-binary-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "BinaryArrayBuilder" "new"))))
    (make-instance 'binary-array-builder :native-pointer pointer)))

(defmethod binary-array-builder-append
           ((binary-array-builder binary-array-builder) value)
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod binary-array-builder-append-null
           ((binary-array-builder binary-array-builder))
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod binary-array-builder-append-nulls
           ((binary-array-builder binary-array-builder) n)
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod binary-array-builder-append-value
           ((binary-array-builder binary-array-builder) value)
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod binary-array-builder-append-value-bytes
           ((binary-array-builder binary-array-builder) value)
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append_value_bytes") value)))

(defmethod binary-array-builder-append-values
           ((binary-array-builder binary-array-builder) values)
  (with-slots (native-pointer)
      binary-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass binary-data-type (gir-object) nil)

(defun make-binary-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "BinaryDataType" "new"))))
    (make-instance 'binary-data-type :native-pointer pointer)))

(defclass boolean-array (gir-object) (length data null-bitmap n-nulls))

(defun make-boolean-array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "BooleanArray" "new") length data null-bitmap n-nulls)))
    (make-instance 'boolean-array :native-pointer pointer)))

(defmethod boolean-array-and ((boolean-array boolean-array) right)
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "and") right)))

(defmethod boolean-array-get-value ((boolean-array boolean-array) i)
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod boolean-array-get-values ((boolean-array boolean-array) length)
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod boolean-array-invert ((boolean-array boolean-array))
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "invert"))))

(defmethod boolean-array-or ((boolean-array boolean-array) right)
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "or") right)))

(defmethod boolean-array-xor ((boolean-array boolean-array) right)
  (with-slots (native-pointer)
      boolean-array
    (gir:invoke (native-pointer "xor") right)))

(defclass boolean-array-builder (array-builder) nil)

(defun make-boolean-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "BooleanArrayBuilder" "new"))))
    (make-instance 'boolean-array-builder :native-pointer pointer)))

(defmethod boolean-array-builder-append
           ((boolean-array-builder boolean-array-builder) value)
  (with-slots (native-pointer)
      boolean-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod boolean-array-builder-append-null
           ((boolean-array-builder boolean-array-builder))
  (with-slots (native-pointer)
      boolean-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod boolean-array-builder-append-nulls
           ((boolean-array-builder boolean-array-builder) n)
  (with-slots (native-pointer)
      boolean-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod boolean-array-builder-append-value
           ((boolean-array-builder boolean-array-builder) value)
  (with-slots (native-pointer)
      boolean-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod boolean-array-builder-append-values
           ((boolean-array-builder boolean-array-builder) values)
  (with-slots (native-pointer)
      boolean-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass boolean-data-type (gir-object) nil)

(defun make-boolean-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "BooleanDataType" "new"))))
    (make-instance 'boolean-data-type :native-pointer pointer)))

(defclass buffer (gir-object) (data))

(defun make-buffer-new (data)
  (let ((pointer (gir:invoke (*ns* "Buffer" "new") data)))
    (make-instance 'buffer :native-pointer pointer)))

(defun make-buffer-new-bytes (data)
  (let ((pointer (gir:invoke (*ns* "Buffer" "new_bytes") data)))
    (make-instance 'buffer :native-pointer pointer)))

(defmethod buffer-copy ((buffer buffer) start size)
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "copy") start size)))

(defmethod buffer-equal ((buffer buffer) other-buffer)
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "equal") other-buffer)))

(defmethod buffer-equal-n-bytes ((buffer buffer) other-buffer n-bytes)
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "equal_n_bytes") other-buffer n-bytes)))

(defmethod buffer-get-capacity ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "get_capacity"))))

(defmethod buffer-get-data ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "get_data"))))

(defmethod buffer-get-mutable-data ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "get_mutable_data"))))

(defmethod buffer-get-parent ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "get_parent"))))

(defmethod buffer-get-size ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "get_size"))))

(defmethod buffer-is-mutable ((buffer buffer))
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "is_mutable"))))

(defmethod buffer-slice ((buffer buffer) offset size)
  (with-slots (native-pointer)
      buffer
    (gir:invoke (native-pointer "slice") offset size)))

(defclass buffer-input-stream (gir-object) (buffer))

(defun make-buffer-input-stream-new (buffer)
  (let ((pointer (gir:invoke (*ns* "BufferInputStream" "new") buffer)))
    (make-instance 'buffer-input-stream :native-pointer pointer)))

(defmethod buffer-input-stream-get-buffer
           ((buffer-input-stream buffer-input-stream))
  (with-slots (native-pointer)
      buffer-input-stream
    (gir:invoke (native-pointer "get_buffer"))))

(defclass buffer-output-stream (gir-object) (buffer))

(defun make-buffer-output-stream-new (buffer)
  (let ((pointer (gir:invoke (*ns* "BufferOutputStream" "new") buffer)))
    (make-instance 'buffer-output-stream :native-pointer pointer)))

(defclass csvread-options (gir-object) nil)

(defun make-csvread-options-new ()
  (let ((pointer (gir:invoke (*ns* "CSVReadOptions" "new"))))
    (make-instance 'csvread-options :native-pointer pointer)))

(defmethod csvread-options-add-column-name
           ((csvread-options csvread-options) column-name)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_column_name") column-name)))

(defmethod csvread-options-add-column-type
           ((csvread-options csvread-options) name data-type)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_column_type") name data-type)))

(defmethod csvread-options-add-false-value
           ((csvread-options csvread-options) false-value)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_false_value") false-value)))

(defmethod csvread-options-add-null-value
           ((csvread-options csvread-options) null-value)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_null_value") null-value)))

(defmethod csvread-options-add-schema
           ((csvread-options csvread-options) schema)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_schema") schema)))

(defmethod csvread-options-add-true-value
           ((csvread-options csvread-options) true-value)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "add_true_value") true-value)))

(defmethod csvread-options-get-column-names ((csvread-options csvread-options))
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "get_column_names"))))

(defmethod csvread-options-get-column-types ((csvread-options csvread-options))
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "get_column_types"))))

(defmethod csvread-options-get-false-values ((csvread-options csvread-options))
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "get_false_values"))))

(defmethod csvread-options-get-null-values ((csvread-options csvread-options))
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "get_null_values"))))

(defmethod csvread-options-get-true-values ((csvread-options csvread-options))
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "get_true_values"))))

(defmethod csvread-options-set-column-names
           ((csvread-options csvread-options) column-names)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "set_column_names") column-names)))

(defmethod csvread-options-set-false-values
           ((csvread-options csvread-options) false-values)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "set_false_values") false-values)))

(defmethod csvread-options-set-null-values
           ((csvread-options csvread-options) null-values)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "set_null_values") null-values)))

(defmethod csvread-options-set-true-values
           ((csvread-options csvread-options) true-values)
  (with-slots (native-pointer)
      csvread-options
    (gir:invoke (native-pointer "set_true_values") true-values)))

(defclass csvreader (gir-object) (input options))

(defun make-csvreader-new (input options)
  (let ((pointer (gir:invoke (*ns* "CSVReader" "new") input options)))
    (make-instance 'csvreader :native-pointer pointer)))

(defmethod csvreader-read ((csvreader csvreader))
  (with-slots (native-pointer)
      csvreader
    (gir:invoke (native-pointer "read"))))

(defclass cast-options (gir-object) nil)

(defun make-cast-options-new ()
  (let ((pointer (gir:invoke (*ns* "CastOptions" "new"))))
    (make-instance 'cast-options :native-pointer pointer)))

(defclass chunked-array (gir-object) (chunks))

(defun make-chunked-array-new (chunks)
  (let ((pointer (gir:invoke (*ns* "ChunkedArray" "new") chunks)))
    (make-instance 'chunked-array :native-pointer pointer)))

(defmethod chunked-array-equal
           ((chunked-array chunked-array) other-chunked-array)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "equal") other-chunked-array)))

(defmethod chunked-array-filter ((chunked-array chunked-array) filter options)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "filter") filter options)))

(defmethod chunked-array-filter-chunked-array
           ((chunked-array chunked-array) filter options)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "filter_chunked_array") filter options)))

(defmethod chunked-array-get-chunk ((chunked-array chunked-array) i)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_chunk") i)))

(defmethod chunked-array-get-chunks ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_chunks"))))

(defmethod chunked-array-get-length ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_length"))))

(defmethod chunked-array-get-n-chunks ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_n_chunks"))))

(defmethod chunked-array-get-n-nulls ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_n_nulls"))))

(defmethod chunked-array-get-n-rows ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_n_rows"))))

(defmethod chunked-array-get-value-data-type ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_value_data_type"))))

(defmethod chunked-array-get-value-type ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "get_value_type"))))

(defmethod chunked-array-slice ((chunked-array chunked-array) offset length)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "slice") offset length)))

(defmethod chunked-array-take ((chunked-array chunked-array) indices options)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "take") indices options)))

(defmethod chunked-array-take-chunked-array
           ((chunked-array chunked-array) indices options)
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "take_chunked_array") indices options)))

(defmethod chunked-array-to-string ((chunked-array chunked-array))
  (with-slots (native-pointer)
      chunked-array
    (gir:invoke (native-pointer "to_string"))))

(defclass codec (gir-object) (type))

(defun make-codec-new (type)
  (let ((pointer (gir:invoke (*ns* "Codec" "new") type)))
    (make-instance 'codec :native-pointer pointer)))

(defmethod codec-get-name ((codec codec))
  (with-slots (native-pointer)
      codec
    (gir:invoke (native-pointer "get_name"))))

(defparameter *compare-operator-less-equal* (gir:nget *ns* "CompareOperator" :less_equal))
(defparameter *compare-operator-less* (gir:nget *ns* "CompareOperator" :less))
(defparameter *compare-operator-greater-equal*
  (gir:nget *ns* "CompareOperator" :greater_equal))
(defparameter *compare-operator-greater* (gir:nget *ns* "CompareOperator" :greater))
(defparameter *compare-operator-not-equal* (gir:nget *ns* "CompareOperator" :not_equal))
(defparameter *compare-operator-equal* (gir:nget *ns* "CompareOperator" :equal))


(defclass compare-options (gir-object) nil)

(defun make-compare-options-new ()
  (let ((pointer (gir:invoke (*ns* "CompareOptions" "new"))))
    (make-instance 'compare-options :native-pointer pointer)))

(defclass compressed-input-stream (gir-object) (codec raw))

(defun make-compressed-input-stream-new (codec raw)
  (let ((pointer (gir:invoke (*ns* "CompressedInputStream" "new") codec raw)))
    (make-instance 'compressed-input-stream :native-pointer pointer)))

(defclass compressed-output-stream (gir-object) (codec raw))

(defun make-compressed-output-stream-new (codec raw)
  (let ((pointer (gir:invoke (*ns* "CompressedOutputStream" "new") codec raw)))
    (make-instance 'compressed-output-stream :native-pointer pointer)))

(defparameter *compression-type-bz2* (gir:nget *ns* "CompressionType" :bz2))
(defparameter *compression-type-lzo* (gir:nget *ns* "CompressionType" :lzo))
(defparameter *compression-type-lz4* (gir:nget *ns* "CompressionType" :lz4))
(defparameter *compression-type-zstd* (gir:nget *ns* "CompressionType" :zstd))
(defparameter *compression-type-brotli* (gir:nget *ns* "CompressionType" :brotli))
(defparameter *compression-type-gzip* (gir:nget *ns* "CompressionType" :gzip))
(defparameter *compression-type-snappy* (gir:nget *ns* "CompressionType" :snappy))
(defparameter *compression-type-uncompressed*
  (gir:nget *ns* "CompressionType" :uncompressed))


(defparameter *count-mode-null* (gir:nget *ns* "CountMode" :null))
(defparameter *count-mode-all* (gir:nget *ns* "CountMode" :all))


(defclass count-options (gir-object) nil)

(defun make-count-options-new ()
  (let ((pointer (gir:invoke (*ns* "CountOptions" "new"))))
    (make-instance 'count-options :native-pointer pointer)))

(defclass arrow-data-type (gir-object) nil)

(defmethod arrow-data-type-equal
           ((arrow-data-type arrow-data-type) other-data-type)
  (with-slots (native-pointer)
      arrow-data-type
    (gir:invoke (native-pointer "equal") other-data-type)))

(defmethod arrow-data-type-get-id ((arrow-data-type arrow-data-type))
  (with-slots (native-pointer)
      arrow-data-type
    (gir:invoke (native-pointer "get_id"))))

(defmethod arrow-data-type-to-string ((arrow-data-type arrow-data-type))
  (with-slots (native-pointer)
      arrow-data-type
    (gir:invoke (native-pointer "to_string"))))

(defclass date32array (gir-object) (length data null-bitmap n-nulls))

(defun make-date32array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Date32Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'date32array :native-pointer pointer)))

(defmethod date32array-get-value ((date32array date32array) i)
  (with-slots (native-pointer)
      date32array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod date32array-get-values ((date32array date32array) length)
  (with-slots (native-pointer)
      date32array
    (gir:invoke (native-pointer "get_values") length)))

(defclass date32array-builder (array-builder) nil)

(defun make-date32array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Date32ArrayBuilder" "new"))))
    (make-instance 'date32array-builder :native-pointer pointer)))

(defmethod date32array-builder-append
           ((date32array-builder date32array-builder) value)
  (with-slots (native-pointer)
      date32array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod date32array-builder-append-null
           ((date32array-builder date32array-builder))
  (with-slots (native-pointer)
      date32array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod date32array-builder-append-nulls
           ((date32array-builder date32array-builder) n)
  (with-slots (native-pointer)
      date32array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod date32array-builder-append-value
           ((date32array-builder date32array-builder) value)
  (with-slots (native-pointer)
      date32array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod date32array-builder-append-values
           ((date32array-builder date32array-builder) values)
  (with-slots (native-pointer)
      date32array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass date32data-type (arrow-data-type) nil)

(defun make-date32data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Date32DataType" "new"))))
    (make-instance 'date32data-type :native-pointer pointer)))

(defclass date64array (gir-object) (length data null-bitmap n-nulls))

(defun make-date64array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Date64Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'date64array :native-pointer pointer)))

(defmethod date64array-get-value ((date64array date64array) i)
  (with-slots (native-pointer)
      date64array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod date64array-get-values ((date64array date64array) length)
  (with-slots (native-pointer)
      date64array
    (gir:invoke (native-pointer "get_values") length)))

(defclass date64array-builder (array-builder) nil)

(defun make-date64array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Date64ArrayBuilder" "new"))))
    (make-instance 'date64array-builder :native-pointer pointer)))

(defmethod date64array-builder-append
           ((date64array-builder date64array-builder) value)
  (with-slots (native-pointer)
      date64array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod date64array-builder-append-null
           ((date64array-builder date64array-builder))
  (with-slots (native-pointer)
      date64array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod date64array-builder-append-nulls
           ((date64array-builder date64array-builder) n)
  (with-slots (native-pointer)
      date64array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod date64array-builder-append-value
           ((date64array-builder date64array-builder) value)
  (with-slots (native-pointer)
      date64array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod date64array-builder-append-values
           ((date64array-builder date64array-builder) values)
  (with-slots (native-pointer)
      date64array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass date64data-type (arrow-data-type) nil)

(defun make-date64data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Date64DataType" "new"))))
    (make-instance 'date64data-type :native-pointer pointer)))

(defclass decimal128 (gir-object) (data))

(defun make-decimal128-new-integer (data)
  (let ((pointer (gir:invoke (*ns* "Decimal128" "new_integer") data)))
    (make-instance 'decimal128 :native-pointer pointer)))

(defun make-decimal128-new-string (data)
  (let ((pointer (gir:invoke (*ns* "Decimal128" "new_string") data)))
    (make-instance 'decimal128 :native-pointer pointer)))

(defmethod decimal128-abs ((decimal128 decimal128))
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "abs"))))

(defmethod decimal128-divide ((decimal128 decimal128) right remainder)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "divide") right remainder)))

(defmethod decimal128-equal ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "equal") other-decimal)))

(defmethod decimal128-greater-than ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "greater_than") other-decimal)))

(defmethod decimal128-greater-than-or-equal
           ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "greater_than_or_equal") other-decimal)))

(defmethod decimal128-less-than ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "less_than") other-decimal)))

(defmethod decimal128-less-than-or-equal
           ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "less_than_or_equal") other-decimal)))

(defmethod decimal128-minus ((decimal128 decimal128) right)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "minus") right)))

(defmethod decimal128-multiply ((decimal128 decimal128) right)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "multiply") right)))

(defmethod decimal128-negate ((decimal128 decimal128))
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "negate"))))

(defmethod decimal128-not-equal ((decimal128 decimal128) other-decimal)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "not_equal") other-decimal)))

(defmethod decimal128-plus ((decimal128 decimal128) right)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "plus") right)))

(defmethod decimal128-rescale
           ((decimal128 decimal128) original-scale new-scale)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "rescale") original-scale new-scale)))

(defmethod decimal128-to-integer ((decimal128 decimal128))
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "to_integer"))))

(defmethod decimal128-to-string ((decimal128 decimal128))
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "to_string"))))

(defmethod decimal128-to-string-scale ((decimal128 decimal128) scale)
  (with-slots (native-pointer)
      decimal128
    (gir:invoke (native-pointer "to_string_scale") scale)))

(defclass decimal128array (gir-object) nil)

(defmethod decimal128array-format-value ((decimal128array decimal128array) i)
  (with-slots (native-pointer)
      decimal128array
    (gir:invoke (native-pointer "format_value") i)))

(defmethod decimal128array-get-value ((decimal128array decimal128array) i)
  (with-slots (native-pointer)
      decimal128array
    (gir:invoke (native-pointer "get_value") i)))

(defclass decimal128array-builder (array-builder) (data-type))

(defun make-decimal128array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "Decimal128ArrayBuilder" "new") data-type)))
    (make-instance 'decimal128array-builder :native-pointer pointer)))

(defmethod decimal128array-builder-append
           ((decimal128array-builder decimal128array-builder) value)
  (with-slots (native-pointer)
      decimal128array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod decimal128array-builder-append-null
           ((decimal128array-builder decimal128array-builder))
  (with-slots (native-pointer)
      decimal128array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod decimal128array-builder-append-value
           ((decimal128array-builder decimal128array-builder) value)
  (with-slots (native-pointer)
      decimal128array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defclass decimal128data-type (gir-object) (precision scale))

(defun make-decimal128data-type-new (precision scale)
  (let ((pointer (gir:invoke (*ns* "Decimal128DataType" "new") precision scale)))
    (make-instance 'decimal128data-type :native-pointer pointer)))

(defclass decimal-data-type (gir-object) (precision scale))

(defun make-decimal-data-type-new (precision scale)
  (let ((pointer (gir:invoke (*ns* "DecimalDataType" "new") precision scale)))
    (make-instance 'decimal-data-type :native-pointer pointer)))

(defmethod decimal-data-type-get-precision
           ((decimal-data-type decimal-data-type))
  (with-slots (native-pointer)
      decimal-data-type
    (gir:invoke (native-pointer "get_precision"))))

(defmethod decimal-data-type-get-scale ((decimal-data-type decimal-data-type))
  (with-slots (native-pointer)
      decimal-data-type
    (gir:invoke (native-pointer "get_scale"))))

(defclass dense-union-array (gir-object)
          (data-type type-ids value-offsets fields))

(defun make-dense-union-array-new (type-ids value-offsets fields)
  (let ((pointer (gir:invoke (*ns* "DenseUnionArray" "new") type-ids value-offsets fields)))
    (make-instance 'dense-union-array :native-pointer pointer)))

(defun make-dense-union-array-new-data-type
       (data-type type-ids value-offsets fields)
  (let ((pointer
         (gir:invoke (*ns* "DenseUnionArray" "new_data_type") data-type type-ids
                     value-offsets fields)))
    (make-instance 'dense-union-array :native-pointer pointer)))

(defclass dense-union-data-type (gir-object) (fields type-codes))

(defun make-dense-union-data-type-new (fields type-codes)
  (let ((pointer (gir:invoke (*ns* "DenseUnionDataType" "new") fields type-codes)))
    (make-instance 'dense-union-data-type :native-pointer pointer)))

(defclass dictionary-array (arrow-array) (data-type indices dictionary))

(defun make-dictionary-array-new (data-type indices dictionary)
  (let ((pointer (gir:invoke (*ns* "DictionaryArray" "new") data-type indices dictionary)))
    (make-instance 'dictionary-array :native-pointer pointer)))

(defmethod dictionary-array-get-dictionary
           ((dictionary-array dictionary-array))
  (with-slots (native-pointer)
      dictionary-array
    (gir:invoke (native-pointer "get_dictionary"))))

(defmethod dictionary-array-get-dictionary-data-type
           ((dictionary-array dictionary-array))
  (with-slots (native-pointer)
      dictionary-array
    (gir:invoke (native-pointer "get_dictionary_data_type"))))

(defmethod dictionary-array-get-indices ((dictionary-array dictionary-array))
  (with-slots (native-pointer)
      dictionary-array
    (gir:invoke (native-pointer "get_indices"))))

(defclass dictionary-data-type (gir-object)
          (index-data-type value-data-type ordered))

(defun make-dictionary-data-type-new (index-data-type value-data-type ordered)
  (let ((pointer
         (gir:invoke (*ns* "DictionaryDataType" "new") index-data-type value-data-type
                     ordered)))
    (make-instance 'dictionary-data-type :native-pointer pointer)))

(defmethod dictionary-data-type-get-index-data-type
           ((dictionary-data-type dictionary-data-type))
  (with-slots (native-pointer)
      dictionary-data-type
    (gir:invoke (native-pointer "get_index_data_type"))))

(defmethod dictionary-data-type-get-value-data-type
           ((dictionary-data-type dictionary-data-type))
  (with-slots (native-pointer)
      dictionary-data-type
    (gir:invoke (native-pointer "get_value_data_type"))))

(defmethod dictionary-data-type-is-ordered
           ((dictionary-data-type dictionary-data-type))
  (with-slots (native-pointer)
      dictionary-data-type
    (gir:invoke (native-pointer "is_ordered"))))

(defclass double-array (gir-object) (length data null-bitmap n-nulls))

(defun make-double-array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "DoubleArray" "new") length data null-bitmap n-nulls)))
    (make-instance 'double-array :native-pointer pointer)))

(defmethod double-array-compare ((double-array double-array) value options)
  (with-slots (native-pointer)
      double-array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod double-array-get-value ((double-array double-array) i)
  (with-slots (native-pointer)
      double-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod double-array-get-values ((double-array double-array) length)
  (with-slots (native-pointer)
      double-array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod double-array-sum ((double-array double-array))
  (with-slots (native-pointer)
      double-array
    (gir:invoke (native-pointer "sum"))))

(defclass double-array-builder (array-builder) nil)

(defun make-double-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "DoubleArrayBuilder" "new"))))
    (make-instance 'double-array-builder :native-pointer pointer)))

(defmethod double-array-builder-append
           ((double-array-builder double-array-builder) value)
  (with-slots (native-pointer)
      double-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod double-array-builder-append-null
           ((double-array-builder double-array-builder))
  (with-slots (native-pointer)
      double-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod double-array-builder-append-nulls
           ((double-array-builder double-array-builder) n)
  (with-slots (native-pointer)
      double-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod double-array-builder-append-value
           ((double-array-builder double-array-builder) value)
  (with-slots (native-pointer)
      double-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod double-array-builder-append-values
           ((double-array-builder double-array-builder) values)
  (with-slots (native-pointer)
      double-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass double-data-type (gir-object) nil)

(defun make-double-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "DoubleDataType" "new"))))
    (make-instance 'double-data-type :native-pointer pointer)))

(defparameter *error-already-exists* (gir:nget *ns* "Error" :already_exists))
(defparameter *error-execution* (gir:nget *ns* "Error" :execution))
(defparameter *error-expression-validation*
  (gir:nget *ns* "Error" :expression_validation))
(defparameter *error-code-generation* (gir:nget *ns* "Error" :code_generation))
(defparameter *error-serialization* (gir:nget *ns* "Error" :serialization))
(defparameter *error-not-implemented* (gir:nget *ns* "Error" :not_implemented))
(defparameter *error-unknown* (gir:nget *ns* "Error" :unknown))
(defparameter *error-index* (gir:nget *ns* "Error" :index))
(defparameter *error-capacity* (gir:nget *ns* "Error" :capacity))
(defparameter *error-io* (gir:nget *ns* "Error" :io))
(defparameter *error-invalid* (gir:nget *ns* "Error" :invalid))
(defparameter *error-type* (gir:nget *ns* "Error" :type))
(defparameter *error-key* (gir:nget *ns* "Error" :key))
(defparameter *error-out-of-memory* (gir:nget *ns* "Error" :out_of_memory))


(defclass feather-file-reader (gir-object) (file))

(defun make-feather-file-reader-new (file)
  (let ((pointer (gir:invoke (*ns* "FeatherFileReader" "new") file)))
    (make-instance 'feather-file-reader :native-pointer pointer)))

(defmethod feather-file-reader-get-version
           ((feather-file-reader feather-file-reader))
  (with-slots (native-pointer)
      feather-file-reader
    (gir:invoke (native-pointer "get_version"))))

(defmethod feather-file-reader-read ((feather-file-reader feather-file-reader))
  (with-slots (native-pointer)
      feather-file-reader
    (gir:invoke (native-pointer "read"))))

(defmethod feather-file-reader-read-indices
           ((feather-file-reader feather-file-reader) indices)
  (with-slots (native-pointer)
      feather-file-reader
    (gir:invoke (native-pointer "read_indices") indices)))

(defmethod feather-file-reader-read-names
           ((feather-file-reader feather-file-reader) names)
  (with-slots (native-pointer)
      feather-file-reader
    (gir:invoke (native-pointer "read_names") names)))

(defclass feather-write-properties (gir-object) nil)

(defun make-feather-write-properties-new ()
  (let ((pointer (gir:invoke (*ns* "FeatherWriteProperties" "new"))))
    (make-instance 'feather-write-properties :native-pointer pointer)))

(defclass field (gir-object) (nullable name data-type))

(defun make-field-new (name data-type)
  (let ((pointer (gir:invoke (*ns* "Field" "new") name data-type)))
    (make-instance 'field :native-pointer pointer)))

(defun make-field-new-full (name data-type nullable)
  (let ((pointer (gir:invoke (*ns* "Field" "new_full") name data-type nullable)))
    (make-instance 'field :native-pointer pointer)))

(defmethod field-equal ((field field) other-field)
  (with-slots (native-pointer)
      field
    (gir:invoke (native-pointer "equal") other-field)))

(defmethod field-get-data-type ((field field))
  (with-slots (native-pointer)
      field
    (gir:invoke (native-pointer "get_data_type"))))

(defmethod field-get-name ((field field))
  (with-slots (native-pointer)
      field
    (gir:invoke (native-pointer "get_name"))))

(defmethod field-is-nullable ((field field))
  (with-slots (native-pointer)
      field
    (gir:invoke (native-pointer "is_nullable"))))

(defmethod field-to-string ((field field))
  (with-slots (native-pointer)
      field
    (gir:invoke (native-pointer "to_string"))))

(defclass file-info (gir-object) nil)

(defun make-file-info-new ()
  (let ((pointer (gir:invoke (*ns* "FileInfo" "new"))))
    (make-instance 'file-info :native-pointer pointer)))

(defmethod file-info-equal ((file-info file-info) other-file-info)
  (with-slots (native-pointer)
      file-info
    (gir:invoke (native-pointer "equal") other-file-info)))

(defmethod file-info-is-dir ((file-info file-info))
  (with-slots (native-pointer)
      file-info
    (gir:invoke (native-pointer "is_dir"))))

(defmethod file-info-is-file ((file-info file-info))
  (with-slots (native-pointer)
      file-info
    (gir:invoke (native-pointer "is_file"))))

(defmethod file-info-to-string ((file-info file-info))
  (with-slots (native-pointer)
      file-info
    (gir:invoke (native-pointer "to_string"))))

(defparameter *file-mode-readwrite* (gir:nget *ns* "FileMode" :readwrite))
(defparameter *file-mode-write* (gir:nget *ns* "FileMode" :write))
(defparameter *file-mode-read* (gir:nget *ns* "FileMode" :read))


(defclass file-output-stream (gir-object) (path append))

(defun make-file-output-stream-new (path append)
  (let ((pointer (gir:invoke (*ns* "FileOutputStream" "new") path append)))
    (make-instance 'file-output-stream :native-pointer pointer)))

(defclass file-selector (gir-object) nil)

(defclass file-system (gir-object) nil)

(defmethod file-system-copy-file ((file-system file-system) src dest)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "copy_file") src dest)))

(defmethod file-system-create-dir ((file-system file-system) path recursive)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "create_dir") path recursive)))

(defmethod file-system-delete-dir ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "delete_dir") path)))

(defmethod file-system-delete-dir-contents ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "delete_dir_contents") path)))

(defmethod file-system-delete-file ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "delete_file") path)))

(defmethod file-system-delete-files ((file-system file-system) paths)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "delete_files") paths)))

(defmethod file-system-get-file-info ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "get_file_info") path)))

(defmethod file-system-get-file-infos-paths ((file-system file-system) paths)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "get_file_infos_paths") paths)))

(defmethod file-system-get-file-infos-selector
           ((file-system file-system) file-selector)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "get_file_infos_selector") file-selector)))

(defmethod file-system-get-type-name ((file-system file-system))
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "get_type_name"))))

(defmethod file-system-move ((file-system file-system) src dest)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "move") src dest)))

(defmethod file-system-open-append-stream ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "open_append_stream") path)))

(defmethod file-system-open-input-file ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "open_input_file") path)))

(defmethod file-system-open-input-stream ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "open_input_stream") path)))

(defmethod file-system-open-output-stream ((file-system file-system) path)
  (with-slots (native-pointer)
      file-system
    (gir:invoke (native-pointer "open_output_stream") path)))

(defparameter *file-type-dir* (gir:nget *ns* "FileType" :dir))
(defparameter *file-type-file* (gir:nget *ns* "FileType" :file))
(defparameter *file-type-unknown* (gir:nget *ns* "FileType" :unknown))
(defparameter *file-type-not-found* (gir:nget *ns* "FileType" :not_found))


(defparameter *filter-null-selection-behavior-emit-null*
  (gir:nget *ns* "FilterNullSelectionBehavior" :emit_null))
(defparameter *filter-null-selection-behavior-drop* (gir:nget *ns* "FilterNullSelectionBehavior" :drop))


(defclass filter-options (gir-object) nil)

(defun make-filter-options-new ()
  (let ((pointer (gir:invoke (*ns* "FilterOptions" "new"))))
    (make-instance 'filter-options :native-pointer pointer)))

(defclass fixed-size-binary-array (gir-object) nil)

(defclass fixed-size-binary-data-type (gir-object) (byte-width))

(defun make-fixed-size-binary-data-type-new (byte-width)
  (let ((pointer (gir:invoke (*ns* "FixedSizeBinaryDataType" "new") byte-width)))
    (make-instance 'fixed-size-binary-data-type :native-pointer pointer)))

(defmethod fixed-size-binary-data-type-get-byte-width
           ((fixed-size-binary-data-type fixed-size-binary-data-type))
  (with-slots (native-pointer)
      fixed-size-binary-data-type
    (gir:invoke (native-pointer "get_byte_width"))))

(defclass fixed-width-data-type (arrow-data-type) nil)

(defmethod fixed-width-data-type-get-bit-width
           ((fixed-width-data-type fixed-width-data-type))
  (with-slots (native-pointer)
      fixed-width-data-type
    (gir:invoke (native-pointer "get_bit_width"))))

(defclass float-array (gir-object) (length data null-bitmap n-nulls))

(defun make-float-array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "FloatArray" "new") length data null-bitmap n-nulls)))
    (make-instance 'float-array :native-pointer pointer)))

(defmethod float-array-compare ((float-array float-array) value options)
  (with-slots (native-pointer)
      float-array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod float-array-get-value ((float-array float-array) i)
  (with-slots (native-pointer)
      float-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod float-array-get-values ((float-array float-array) length)
  (with-slots (native-pointer)
      float-array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod float-array-sum ((float-array float-array))
  (with-slots (native-pointer)
      float-array
    (gir:invoke (native-pointer "sum"))))

(defclass float-array-builder (array-builder) nil)

(defun make-float-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "FloatArrayBuilder" "new"))))
    (make-instance 'float-array-builder :native-pointer pointer)))

(defmethod float-array-builder-append
           ((float-array-builder float-array-builder) value)
  (with-slots (native-pointer)
      float-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod float-array-builder-append-null
           ((float-array-builder float-array-builder))
  (with-slots (native-pointer)
      float-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod float-array-builder-append-nulls
           ((float-array-builder float-array-builder) n)
  (with-slots (native-pointer)
      float-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod float-array-builder-append-value
           ((float-array-builder float-array-builder) value)
  (with-slots (native-pointer)
      float-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod float-array-builder-append-values
           ((float-array-builder float-array-builder) values)
  (with-slots (native-pointer)
      float-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass float-data-type (gir-object) nil)

(defun make-float-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "FloatDataType" "new"))))
    (make-instance 'float-data-type :native-pointer pointer)))

(defclass floating-point-data-type (gir-object) nil)

(defclass gioinput-stream (gir-object) (gio-input-stream))

(defun make-gioinput-stream-new (gio-input-stream)
  (let ((pointer (gir:invoke (*ns* "GIOInputStream" "new") gio-input-stream)))
    (make-instance 'gioinput-stream :native-pointer pointer)))

(defmethod gioinput-stream-get-raw ((gioinput-stream gioinput-stream))
  (with-slots (native-pointer)
      gioinput-stream
    (gir:invoke (native-pointer "get_raw"))))

(defclass giooutput-stream (gir-object) (gio-output-stream))

(defun make-giooutput-stream-new (gio-output-stream)
  (let ((pointer (gir:invoke (*ns* "GIOOutputStream" "new") gio-output-stream)))
    (make-instance 'giooutput-stream :native-pointer pointer)))

(defmethod giooutput-stream-get-raw ((giooutput-stream giooutput-stream))
  (with-slots (native-pointer)
      giooutput-stream
    (gir:invoke (native-pointer "get_raw"))))

(defclass input-stream (gir-object) nil)

(defmethod input-stream-advance ((input-stream input-stream) n-bytes)
  (with-slots (native-pointer)
      input-stream
    (gir:invoke (native-pointer "advance") n-bytes)))

(defmethod input-stream-align ((input-stream input-stream) alignment)
  (with-slots (native-pointer)
      input-stream
    (gir:invoke (native-pointer "align") alignment)))

(defmethod input-stream-read-tensor ((input-stream input-stream))
  (with-slots (native-pointer)
      input-stream
    (gir:invoke (native-pointer "read_tensor"))))

(defclass int16array (gir-object) (length data null-bitmap n-nulls))

(defun make-int16array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Int16Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'int16array :native-pointer pointer)))

(defmethod int16array-compare ((int16array int16array) value options)
  (with-slots (native-pointer)
      int16array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod int16array-get-value ((int16array int16array) i)
  (with-slots (native-pointer)
      int16array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod int16array-get-values ((int16array int16array) length)
  (with-slots (native-pointer)
      int16array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod int16array-sum ((int16array int16array))
  (with-slots (native-pointer)
      int16array
    (gir:invoke (native-pointer "sum"))))

(defclass int16array-builder (array-builder) nil)

(defun make-int16array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Int16ArrayBuilder" "new"))))
    (make-instance 'int16array-builder :native-pointer pointer)))

(defmethod int16array-builder-append
           ((int16array-builder int16array-builder) value)
  (with-slots (native-pointer)
      int16array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod int16array-builder-append-null
           ((int16array-builder int16array-builder))
  (with-slots (native-pointer)
      int16array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod int16array-builder-append-nulls
           ((int16array-builder int16array-builder) n)
  (with-slots (native-pointer)
      int16array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod int16array-builder-append-value
           ((int16array-builder int16array-builder) value)
  (with-slots (native-pointer)
      int16array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod int16array-builder-append-values
           ((int16array-builder int16array-builder) values)
  (with-slots (native-pointer)
      int16array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass int16data-type (gir-object) nil)

(defun make-int16data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Int16DataType" "new"))))
    (make-instance 'int16data-type :native-pointer pointer)))

(defclass int32array (gir-object) (length data null-bitmap n-nulls))

(defun make-int32array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Int32Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'int32array :native-pointer pointer)))

(defmethod int32array-compare ((int32array int32array) value options)
  (with-slots (native-pointer)
      int32array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod int32array-get-value ((int32array int32array) i)
  (with-slots (native-pointer)
      int32array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod int32array-get-values ((int32array int32array) length)
  (with-slots (native-pointer)
      int32array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod int32array-sum ((int32array int32array))
  (with-slots (native-pointer)
      int32array
    (gir:invoke (native-pointer "sum"))))

(defclass int32array-builder (array-builder) nil)

(defun make-int32array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Int32ArrayBuilder" "new"))))
    (make-instance 'int32array-builder :native-pointer pointer)))

(defmethod int32array-builder-append
           ((int32array-builder int32array-builder) value)
  (with-slots (native-pointer)
      int32array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod int32array-builder-append-null
           ((int32array-builder int32array-builder))
  (with-slots (native-pointer)
      int32array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod int32array-builder-append-nulls
           ((int32array-builder int32array-builder) n)
  (with-slots (native-pointer)
      int32array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod int32array-builder-append-value
           ((int32array-builder int32array-builder) value)
  (with-slots (native-pointer)
      int32array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod int32array-builder-append-values
           ((int32array-builder int32array-builder) values)
  (with-slots (native-pointer)
      int32array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass int32data-type (gir-object) nil)

(defun make-int32data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Int32DataType" "new"))))
    (make-instance 'int32data-type :native-pointer pointer)))

(defclass int64array (gir-object) (length data null-bitmap n-nulls))

(defun make-int64array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Int64Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'int64array :native-pointer pointer)))

(defmethod int64array-compare ((int64array int64array) value options)
  (with-slots (native-pointer)
      int64array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod int64array-get-value ((int64array int64array) i)
  (with-slots (native-pointer)
      int64array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod int64array-get-values ((int64array int64array) length)
  (with-slots (native-pointer)
      int64array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod int64array-sum ((int64array int64array))
  (with-slots (native-pointer)
      int64array
    (gir:invoke (native-pointer "sum"))))

(defclass int64array-builder (array-builder) nil)

(defun make-int64array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Int64ArrayBuilder" "new"))))
    (make-instance 'int64array-builder :native-pointer pointer)))

(defmethod int64array-builder-append
           ((int64array-builder int64array-builder) value)
  (with-slots (native-pointer)
      int64array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod int64array-builder-append-null
           ((int64array-builder int64array-builder))
  (with-slots (native-pointer)
      int64array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod int64array-builder-append-nulls
           ((int64array-builder int64array-builder) n)
  (with-slots (native-pointer)
      int64array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod int64array-builder-append-value
           ((int64array-builder int64array-builder) value)
  (with-slots (native-pointer)
      int64array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod int64array-builder-append-values
           ((int64array-builder int64array-builder) values)
  (with-slots (native-pointer)
      int64array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass int64data-type (gir-object) nil)

(defun make-int64data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Int64DataType" "new"))))
    (make-instance 'int64data-type :native-pointer pointer)))

(defclass int8array (gir-object) (length data null-bitmap n-nulls))

(defun make-int8array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Int8Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'int8array :native-pointer pointer)))

(defmethod int8array-compare ((int8array int8array) value options)
  (with-slots (native-pointer)
      int8array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod int8array-get-value ((int8array int8array) i)
  (with-slots (native-pointer)
      int8array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod int8array-get-values ((int8array int8array) length)
  (with-slots (native-pointer)
      int8array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod int8array-sum ((int8array int8array))
  (with-slots (native-pointer)
      int8array
    (gir:invoke (native-pointer "sum"))))

(defclass int8array-builder (array-builder) nil)

(defun make-int8array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "Int8ArrayBuilder" "new"))))
    (make-instance 'int8array-builder :native-pointer pointer)))

(defmethod int8array-builder-append
           ((int8array-builder int8array-builder) value)
  (with-slots (native-pointer)
      int8array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod int8array-builder-append-null
           ((int8array-builder int8array-builder))
  (with-slots (native-pointer)
      int8array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod int8array-builder-append-nulls
           ((int8array-builder int8array-builder) n)
  (with-slots (native-pointer)
      int8array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod int8array-builder-append-value
           ((int8array-builder int8array-builder) value)
  (with-slots (native-pointer)
      int8array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod int8array-builder-append-values
           ((int8array-builder int8array-builder) values)
  (with-slots (native-pointer)
      int8array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass int8data-type (gir-object) nil)

(defun make-int8data-type-new ()
  (let ((pointer (gir:invoke (*ns* "Int8DataType" "new"))))
    (make-instance 'int8data-type :native-pointer pointer)))

(defclass int-array-builder (array-builder) nil)

(defun make-int-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "IntArrayBuilder" "new"))))
    (make-instance 'int-array-builder :native-pointer pointer)))

(defmethod int-array-builder-append
           ((int-array-builder int-array-builder) value)
  (with-slots (native-pointer)
      int-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod int-array-builder-append-null
           ((int-array-builder int-array-builder))
  (with-slots (native-pointer)
      int-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod int-array-builder-append-nulls
           ((int-array-builder int-array-builder) n)
  (with-slots (native-pointer)
      int-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod int-array-builder-append-value
           ((int-array-builder int-array-builder) value)
  (with-slots (native-pointer)
      int-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod int-array-builder-append-values
           ((int-array-builder int-array-builder) values)
  (with-slots (native-pointer)
      int-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass integer-data-type (gir-object) nil)

(defmethod integer-data-type-is-signed ((integer-data-type integer-data-type))
  (with-slots (native-pointer)
      integer-data-type
    (gir:invoke (native-pointer "is_signed"))))

(defclass jsonread-options (gir-object) nil)

(defun make-jsonread-options-new ()
  (let ((pointer (gir:invoke (*ns* "JSONReadOptions" "new"))))
    (make-instance 'jsonread-options :native-pointer pointer)))

(defparameter *jsonread-unexpected-field-behavior-infer-type*
  (gir:nget *ns* "JSONReadUnexpectedFieldBehavior" :infer_type))
(defparameter *jsonread-unexpected-field-behavior-error*
  (gir:nget *ns* "JSONReadUnexpectedFieldBehavior" :error))
(defparameter *jsonread-unexpected-field-behavior-ignore*
  (gir:nget *ns* "JSONReadUnexpectedFieldBehavior" :ignore))


(defclass jsonreader (gir-object) (input options))

(defun make-jsonreader-new (input options)
  (let ((pointer (gir:invoke (*ns* "JSONReader" "new") input options)))
    (make-instance 'jsonreader :native-pointer pointer)))

(defmethod jsonreader-read ((jsonreader jsonreader))
  (with-slots (native-pointer)
      jsonreader
    (gir:invoke (native-pointer "read"))))

(defclass large-binary-array (arrow-array)
          (length value-offsets data null-bitmap n-nulls))

(defun make-large-binary-array-new
       (length value-offsets data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "LargeBinaryArray" "new") length value-offsets data null-bitmap
                     n-nulls)))
    (make-instance 'large-binary-array :native-pointer pointer)))

(defmethod large-binary-array-get-buffer
           ((large-binary-array large-binary-array))
  (with-slots (native-pointer)
      large-binary-array
    (gir:invoke (native-pointer "get_buffer"))))

(defmethod large-binary-array-get-offsets-buffer
           ((large-binary-array large-binary-array))
  (with-slots (native-pointer)
      large-binary-array
    (gir:invoke (native-pointer "get_offsets_buffer"))))

(defmethod large-binary-array-get-value
           ((large-binary-array large-binary-array) i)
  (with-slots (native-pointer)
      large-binary-array
    (gir:invoke (native-pointer "get_value") i)))

(defclass large-binary-array-builder (array-builder) nil)

(defun make-large-binary-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "LargeBinaryArrayBuilder" "new"))))
    (make-instance 'large-binary-array-builder :native-pointer pointer)))

(defmethod large-binary-array-builder-append-null
           ((large-binary-array-builder large-binary-array-builder))
  (with-slots (native-pointer)
      large-binary-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod large-binary-array-builder-append-nulls
           ((large-binary-array-builder large-binary-array-builder) n)
  (with-slots (native-pointer)
      large-binary-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod large-binary-array-builder-append-value
           ((large-binary-array-builder large-binary-array-builder) value)
  (with-slots (native-pointer)
      large-binary-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod large-binary-array-builder-append-value-bytes
           ((large-binary-array-builder large-binary-array-builder) value)
  (with-slots (native-pointer)
      large-binary-array-builder
    (gir:invoke (native-pointer "append_value_bytes") value)))

(defmethod large-binary-array-builder-append-values
           ((large-binary-array-builder large-binary-array-builder) values)
  (with-slots (native-pointer)
      large-binary-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass large-binary-data-type (arrow-data-type) nil)

(defun make-large-binary-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "LargeBinaryDataType" "new"))))
    (make-instance 'large-binary-data-type :native-pointer pointer)))

(defclass large-list-array (arrow-array)
          (data-type length value-offsets values null-bitmap n-nulls))

(defun make-large-list-array-new
       (data-type length value-offsets values null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "LargeListArray" "new") data-type length value-offsets values
                     null-bitmap n-nulls)))
    (make-instance 'large-list-array :native-pointer pointer)))

(defmethod large-list-array-get-value ((large-list-array large-list-array) i)
  (with-slots (native-pointer)
      large-list-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod large-list-array-get-value-type
           ((large-list-array large-list-array))
  (with-slots (native-pointer)
      large-list-array
    (gir:invoke (native-pointer "get_value_type"))))

(defclass large-list-array-builder (array-builder) (data-type))

(defun make-large-list-array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "LargeListArrayBuilder" "new") data-type)))
    (make-instance 'large-list-array-builder :native-pointer pointer)))

(defmethod large-list-array-builder-append-null
           ((large-list-array-builder large-list-array-builder))
  (with-slots (native-pointer)
      large-list-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod large-list-array-builder-append-value
           ((large-list-array-builder large-list-array-builder))
  (with-slots (native-pointer)
      large-list-array-builder
    (gir:invoke (native-pointer "append_value"))))

(defmethod large-list-array-builder-get-value-builder
           ((large-list-array-builder large-list-array-builder))
  (with-slots (native-pointer)
      large-list-array-builder
    (gir:invoke (native-pointer "get_value_builder"))))

(defclass large-list-data-type (arrow-data-type) (field))

(defun make-large-list-data-type-new (field)
  (let ((pointer (gir:invoke (*ns* "LargeListDataType" "new") field)))
    (make-instance 'large-list-data-type :native-pointer pointer)))

(defmethod large-list-data-type-get-field
           ((large-list-data-type large-list-data-type))
  (with-slots (native-pointer)
      large-list-data-type
    (gir:invoke (native-pointer "get_field"))))

(defclass large-string-array (large-binary-array)
          (length value-offsets data null-bitmap n-nulls))

(defun make-large-string-array-new
       (length value-offsets data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "LargeStringArray" "new") length value-offsets data null-bitmap
                     n-nulls)))
    (make-instance 'large-string-array :native-pointer pointer)))

(defmethod large-string-array-get-string
           ((large-string-array large-string-array) i)
  (with-slots (native-pointer)
      large-string-array
    (gir:invoke (native-pointer "get_string") i)))

(defclass large-string-array-builder (large-binary-array-builder) nil)

(defun make-large-string-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "LargeStringArrayBuilder" "new"))))
    (make-instance 'large-string-array-builder :native-pointer pointer)))

(defmethod large-string-array-builder-append-string
           ((large-string-array-builder large-string-array-builder) value)
  (with-slots (native-pointer)
      large-string-array-builder
    (gir:invoke (native-pointer "append_string") value)))

(defmethod large-string-array-builder-append-strings
           ((large-string-array-builder large-string-array-builder) values)
  (with-slots (native-pointer)
      large-string-array-builder
    (gir:invoke (native-pointer "append_strings") values)))

(defclass large-string-data-type (arrow-data-type) nil)

(defun make-large-string-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "LargeStringDataType" "new"))))
    (make-instance 'large-string-data-type :native-pointer pointer)))

(defclass list-array (arrow-array)
          (data-type length value-offsets values null-bitmap n-nulls))

(defun make-list-array-new
       (data-type length value-offsets values null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "ListArray" "new") data-type length value-offsets values
                     null-bitmap n-nulls)))
    (make-instance 'list-array :native-pointer pointer)))

(defmethod list-array-get-value ((list-array list-array) i)
  (with-slots (native-pointer)
      list-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod list-array-get-value-type ((list-array list-array))
  (with-slots (native-pointer)
      list-array
    (gir:invoke (native-pointer "get_value_type"))))

(defclass list-array-builder (array-builder) (data-type))

(defun make-list-array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "ListArrayBuilder" "new") data-type)))
    (make-instance 'list-array-builder :native-pointer pointer)))

(defmethod list-array-builder-append ((list-array-builder list-array-builder))
  (with-slots (native-pointer)
      list-array-builder
    (gir:invoke (native-pointer "append"))))

(defmethod list-array-builder-append-null
           ((list-array-builder list-array-builder))
  (with-slots (native-pointer)
      list-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod list-array-builder-append-value
           ((list-array-builder list-array-builder))
  (with-slots (native-pointer)
      list-array-builder
    (gir:invoke (native-pointer "append_value"))))

(defmethod list-array-builder-get-value-builder
           ((list-array-builder list-array-builder))
  (with-slots (native-pointer)
      list-array-builder
    (gir:invoke (native-pointer "get_value_builder"))))

(defclass list-data-type (arrow-data-type) (field))

(defun make-list-data-type-new (field)
  (let ((pointer (gir:invoke (*ns* "ListDataType" "new") field)))
    (make-instance 'list-data-type :native-pointer pointer)))

(defmethod list-data-type-get-field ((list-data-type list-data-type))
  (with-slots (native-pointer)
      list-data-type
    (gir:invoke (native-pointer "get_field"))))

(defmethod list-data-type-get-value-field ((list-data-type list-data-type))
  (with-slots (native-pointer)
      list-data-type
    (gir:invoke (native-pointer "get_value_field"))))

(defclass local-file-system (file-system) (options))

(defun make-local-file-system-new (options)
  (let ((pointer (gir:invoke (*ns* "LocalFileSystem" "new") options)))
    (make-instance 'local-file-system :native-pointer pointer)))

(defclass local-file-system-options (gir-object) nil)

(defun make-local-file-system-options-new ()
  (let ((pointer (gir:invoke (*ns* "LocalFileSystemOptions" "new"))))
    (make-instance 'local-file-system-options :native-pointer pointer)))

(defclass map-array (list-array) (offsets keys items))

(defun make-map-array-new (offsets keys items)
  (let ((pointer (gir:invoke (*ns* "MapArray" "new") offsets keys items)))
    (make-instance 'map-array :native-pointer pointer)))

(defmethod map-array-get-items ((map-array map-array))
  (with-slots (native-pointer)
      map-array
    (gir:invoke (native-pointer "get_items"))))

(defmethod map-array-get-keys ((map-array map-array))
  (with-slots (native-pointer)
      map-array
    (gir:invoke (native-pointer "get_keys"))))

(defclass map-array-builder (array-builder) (data-type))

(defun make-map-array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "MapArrayBuilder" "new") data-type)))
    (make-instance 'map-array-builder :native-pointer pointer)))

(defmethod map-array-builder-append-null
           ((map-array-builder map-array-builder))
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod map-array-builder-append-nulls
           ((map-array-builder map-array-builder) n)
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod map-array-builder-append-value
           ((map-array-builder map-array-builder))
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "append_value"))))

(defmethod map-array-builder-append-values
           ((map-array-builder map-array-builder) offsets)
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "append_values") offsets)))

(defmethod map-array-builder-get-item-builder
           ((map-array-builder map-array-builder))
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "get_item_builder"))))

(defmethod map-array-builder-get-key-builder
           ((map-array-builder map-array-builder))
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "get_key_builder"))))

(defmethod map-array-builder-get-value-builder
           ((map-array-builder map-array-builder))
  (with-slots (native-pointer)
      map-array-builder
    (gir:invoke (native-pointer "get_value_builder"))))

(defclass map-data-type (list-data-type) (key-type item-type))

(defun make-map-data-type-new (key-type item-type)
  (let ((pointer (gir:invoke (*ns* "MapDataType" "new") key-type item-type)))
    (make-instance 'map-data-type :native-pointer pointer)))

(defmethod map-data-type-get-item-type ((map-data-type map-data-type))
  (with-slots (native-pointer)
      map-data-type
    (gir:invoke (native-pointer "get_item_type"))))

(defmethod map-data-type-get-key-type ((map-data-type map-data-type))
  (with-slots (native-pointer)
      map-data-type
    (gir:invoke (native-pointer "get_key_type"))))

(defclass memory-mapped-input-stream (gir-object) (path))

(defun make-memory-mapped-input-stream-new (path)
  (let ((pointer (gir:invoke (*ns* "MemoryMappedInputStream" "new") path)))
    (make-instance 'memory-mapped-input-stream :native-pointer pointer)))

(defparameter *metadata-version-v3* (gir:nget *ns* "MetadataVersion" :v3))
(defparameter *metadata-version-v2* (gir:nget *ns* "MetadataVersion" :v2))
(defparameter *metadata-version-v1* (gir:nget *ns* "MetadataVersion" :v1))


(defclass mutable-buffer (buffer) (data))

(defun make-mutable-buffer-new (data)
  (let ((pointer (gir:invoke (*ns* "MutableBuffer" "new") data)))
    (make-instance 'mutable-buffer :native-pointer pointer)))

(defun make-mutable-buffer-new-bytes (data)
  (let ((pointer (gir:invoke (*ns* "MutableBuffer" "new_bytes") data)))
    (make-instance 'mutable-buffer :native-pointer pointer)))

(defmethod mutable-buffer-set-data
           ((mutable-buffer mutable-buffer) offset data)
  (with-slots (native-pointer)
      mutable-buffer
    (gir:invoke (native-pointer "set_data") offset data)))

(defmethod mutable-buffer-slice ((mutable-buffer mutable-buffer) offset size)
  (with-slots (native-pointer)
      mutable-buffer
    (gir:invoke (native-pointer "slice") offset size)))

(defclass null-array (arrow-array) (length))

(defun make-null-array-new (length)
  (let ((pointer (gir:invoke (*ns* "NullArray" "new") length)))
    (make-instance 'null-array :native-pointer pointer)))

(defclass null-array-builder (array-builder) nil)

(defun make-null-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "NullArrayBuilder" "new"))))
    (make-instance 'null-array-builder :native-pointer pointer)))

(defmethod null-array-builder-append-null
           ((null-array-builder null-array-builder))
  (with-slots (native-pointer)
      null-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod null-array-builder-append-nulls
           ((null-array-builder null-array-builder) n)
  (with-slots (native-pointer)
      null-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defclass null-data-type (arrow-data-type) nil)

(defun make-null-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "NullDataType" "new"))))
    (make-instance 'null-data-type :native-pointer pointer)))

(defclass numeric-array (gir-object) nil)

(defmethod numeric-array-mean ((numeric-array numeric-array))
  (with-slots (native-pointer)
      numeric-array
    (gir:invoke (native-pointer "mean"))))

(defclass numeric-data-type (fixed-width-data-type) nil)

(defclass output-stream (gir-object) nil)

(defmethod output-stream-align ((output-stream output-stream) alignment)
  (with-slots (native-pointer)
      output-stream
    (gir:invoke (native-pointer "align") alignment)))

(defmethod output-stream-write-tensor ((output-stream output-stream) tensor)
  (with-slots (native-pointer)
      output-stream
    (gir:invoke (native-pointer "write_tensor") tensor)))

(defclass primitive-array (arrow-array) nil)

(defmethod primitive-array-get-buffer ((primitive-array primitive-array))
  (with-slots (native-pointer)
      primitive-array
    (gir:invoke (native-pointer "get_buffer"))))

(defclass record-batch (gir-object) (schema n-rows columns))

(defun make-record-batch-new (schema n-rows columns)
  (let ((pointer (gir:invoke (*ns* "RecordBatch" "new") schema n-rows columns)))
    (make-instance 'record-batch :native-pointer pointer)))

(defmethod record-batch-add-column ((record-batch record-batch) i field column)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "add_column") i field column)))

(defmethod record-batch-equal ((record-batch record-batch) other-record-batch)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "equal") other-record-batch)))

(defmethod record-batch-equal-metadata
           ((record-batch record-batch) other-record-batch check-metadata)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "equal_metadata") other-record-batch
                check-metadata)))

(defmethod record-batch-filter ((record-batch record-batch) filter options)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "filter") filter options)))

(defmethod record-batch-get-column-data ((record-batch record-batch) i)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "get_column_data") i)))

(defmethod record-batch-get-column-name ((record-batch record-batch) i)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "get_column_name") i)))

(defmethod record-batch-get-n-columns ((record-batch record-batch))
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "get_n_columns"))))

(defmethod record-batch-get-n-rows ((record-batch record-batch))
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "get_n_rows"))))

(defmethod record-batch-get-schema ((record-batch record-batch))
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "get_schema"))))

(defmethod record-batch-remove-column ((record-batch record-batch) i)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "remove_column") i)))

(defmethod record-batch-slice ((record-batch record-batch) offset length)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "slice") offset length)))

(defmethod record-batch-take ((record-batch record-batch) indices options)
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "take") indices options)))

(defmethod record-batch-to-string ((record-batch record-batch))
  (with-slots (native-pointer)
      record-batch
    (gir:invoke (native-pointer "to_string"))))

(defclass record-batch-builder (gir-object) (schema))

(defun make-record-batch-builder-new (schema)
  (let ((pointer (gir:invoke (*ns* "RecordBatchBuilder" "new") schema)))
    (make-instance 'record-batch-builder :native-pointer pointer)))

(defmethod record-batch-builder-flush
           ((record-batch-builder record-batch-builder))
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "flush"))))

(defmethod record-batch-builder-get-column-builder
           ((record-batch-builder record-batch-builder) i)
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_column_builder") i)))

(defmethod record-batch-builder-get-field
           ((record-batch-builder record-batch-builder) i)
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_field") i)))

(defmethod record-batch-builder-get-initial-capacity
           ((record-batch-builder record-batch-builder))
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_initial_capacity"))))

(defmethod record-batch-builder-get-n-columns
           ((record-batch-builder record-batch-builder))
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_n_columns"))))

(defmethod record-batch-builder-get-n-fields
           ((record-batch-builder record-batch-builder))
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_n_fields"))))

(defmethod record-batch-builder-get-schema
           ((record-batch-builder record-batch-builder))
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "get_schema"))))

(defmethod record-batch-builder-set-initial-capacity
           ((record-batch-builder record-batch-builder) capacity)
  (with-slots (native-pointer)
      record-batch-builder
    (gir:invoke (native-pointer "set_initial_capacity") capacity)))

(defclass record-batch-file-reader (gir-object) (file))

(defun make-record-batch-file-reader-new (file)
  (let ((pointer (gir:invoke (*ns* "RecordBatchFileReader" "new") file)))
    (make-instance 'record-batch-file-reader :native-pointer pointer)))

(defmethod record-batch-file-reader-get-n-record-batches
           ((record-batch-file-reader record-batch-file-reader))
  (with-slots (native-pointer)
      record-batch-file-reader
    (gir:invoke (native-pointer "get_n_record_batches"))))

(defmethod record-batch-file-reader-get-record-batch
           ((record-batch-file-reader record-batch-file-reader) i)
  (with-slots (native-pointer)
      record-batch-file-reader
    (gir:invoke (native-pointer "get_record_batch") i)))

(defmethod record-batch-file-reader-get-schema
           ((record-batch-file-reader record-batch-file-reader))
  (with-slots (native-pointer)
      record-batch-file-reader
    (gir:invoke (native-pointer "get_schema"))))

(defmethod record-batch-file-reader-get-version
           ((record-batch-file-reader record-batch-file-reader))
  (with-slots (native-pointer)
      record-batch-file-reader
    (gir:invoke (native-pointer "get_version"))))

(defmethod record-batch-file-reader-read-record-batch
           ((record-batch-file-reader record-batch-file-reader) i)
  (with-slots (native-pointer)
      record-batch-file-reader
    (gir:invoke (native-pointer "read_record_batch") i)))

(defclass record-batch-file-writer (gir-object) (sink schema))

(defun make-record-batch-file-writer-new (sink schema)
  (let ((pointer (gir:invoke (*ns* "RecordBatchFileWriter" "new") sink schema)))
    (make-instance 'record-batch-file-writer :native-pointer pointer)))

(defclass record-batch-iterator (gir-object) (record-batches))

(defun make-record-batch-iterator-new (record-batches)
  (let ((pointer (gir:invoke (*ns* "RecordBatchIterator" "new") record-batches)))
    (make-instance 'record-batch-iterator :native-pointer pointer)))

(defmethod record-batch-iterator-equal
           ((record-batch-iterator record-batch-iterator) other-iterator)
  (with-slots (native-pointer)
      record-batch-iterator
    (gir:invoke (native-pointer "equal") other-iterator)))

(defmethod record-batch-iterator-next
           ((record-batch-iterator record-batch-iterator))
  (with-slots (native-pointer)
      record-batch-iterator
    (gir:invoke (native-pointer "next"))))

(defmethod record-batch-iterator-to-list
           ((record-batch-iterator record-batch-iterator))
  (with-slots (native-pointer)
      record-batch-iterator
    (gir:invoke (native-pointer "to_list"))))

(defclass record-batch-reader (gir-object) nil)

(defmethod record-batch-reader-get-next-record-batch
           ((record-batch-reader record-batch-reader))
  (with-slots (native-pointer)
      record-batch-reader
    (gir:invoke (native-pointer "get_next_record_batch"))))

(defmethod record-batch-reader-get-schema
           ((record-batch-reader record-batch-reader))
  (with-slots (native-pointer)
      record-batch-reader
    (gir:invoke (native-pointer "get_schema"))))

(defmethod record-batch-reader-read-next
           ((record-batch-reader record-batch-reader))
  (with-slots (native-pointer)
      record-batch-reader
    (gir:invoke (native-pointer "read_next"))))

(defmethod record-batch-reader-read-next-record-batch
           ((record-batch-reader record-batch-reader))
  (with-slots (native-pointer)
      record-batch-reader
    (gir:invoke (native-pointer "read_next_record_batch"))))

(defclass record-batch-stream-reader (record-batch-reader) (stream))

(defun make-record-batch-stream-reader-new (stream)
  (let ((pointer (gir:invoke (*ns* "RecordBatchStreamReader" "new") stream)))
    (make-instance 'record-batch-stream-reader :native-pointer pointer)))

(defclass record-batch-stream-writer (gir-object) (sink schema))

(defun make-record-batch-stream-writer-new (sink schema)
  (let ((pointer (gir:invoke (*ns* "RecordBatchStreamWriter" "new") sink schema)))
    (make-instance 'record-batch-stream-writer :native-pointer pointer)))

(defclass record-batch-writer (gir-object) nil)

(defmethod record-batch-writer-close
           ((record-batch-writer record-batch-writer))
  (with-slots (native-pointer)
      record-batch-writer
    (gir:invoke (native-pointer "close"))))

(defmethod record-batch-writer-write-record-batch
           ((record-batch-writer record-batch-writer) record-batch)
  (with-slots (native-pointer)
      record-batch-writer
    (gir:invoke (native-pointer "write_record_batch") record-batch)))

(defmethod record-batch-writer-write-table
           ((record-batch-writer record-batch-writer) table)
  (with-slots (native-pointer)
      record-batch-writer
    (gir:invoke (native-pointer "write_table") table)))

(defclass resizable-buffer (mutable-buffer) (initial-size))

(defun make-resizable-buffer-new (initial-size)
  (let ((pointer (gir:invoke (*ns* "ResizableBuffer" "new") initial-size)))
    (make-instance 'resizable-buffer :native-pointer pointer)))

(defmethod resizable-buffer-reserve
           ((resizable-buffer resizable-buffer) new-capacity)
  (with-slots (native-pointer)
      resizable-buffer
    (gir:invoke (native-pointer "reserve") new-capacity)))

(defmethod resizable-buffer-resize
           ((resizable-buffer resizable-buffer) new-size)
  (with-slots (native-pointer)
      resizable-buffer
    (gir:invoke (native-pointer "resize") new-size)))

(defclass arrow-schema (gir-object) (fields))

(defun make-arrow-schema-new (fields)
  (let ((pointer (gir:invoke (*ns* "Schema" "new") fields)))
    (make-instance 'arrow-schema :native-pointer pointer)))

(defmethod arrow-schema-add-field ((arrow-schema arrow-schema) i field)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "add_field") i field)))

(defmethod arrow-schema-equal ((arrow-schema arrow-schema) other-schema)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "equal") other-schema)))

(defmethod arrow-schema-get-field ((arrow-schema arrow-schema) i)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "get_field") i)))

(defmethod arrow-schema-get-field-by-name ((arrow-schema arrow-schema) name)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "get_field_by_name") name)))

(defmethod arrow-schema-get-field-index ((arrow-schema arrow-schema) name)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "get_field_index") name)))

(defmethod arrow-schema-get-fields ((arrow-schema arrow-schema))
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "get_fields"))))

(defmethod arrow-schema-get-metadata ((arrow-schema arrow-schema))
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "get_metadata"))))

(defmethod arrow-schema-n-fields ((arrow-schema arrow-schema))
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "n_fields"))))

(defmethod arrow-schema-remove-field ((arrow-schema arrow-schema) i)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "remove_field") i)))

(defmethod arrow-schema-replace-field ((arrow-schema arrow-schema) i field)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "replace_field") i field)))

(defmethod arrow-schema-to-string ((arrow-schema arrow-schema))
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "to_string"))))

(defmethod arrow-schema-to-string-metadata
           ((arrow-schema arrow-schema) show-metadata)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "to_string_metadata") show-metadata)))

(defmethod arrow-schema-with-metadata ((arrow-schema arrow-schema) metadata)
  (with-slots (native-pointer)
      arrow-schema
    (gir:invoke (native-pointer "with_metadata") metadata)))

(defclass seekable-input-stream (input-stream) nil)

(defmethod seekable-input-stream-get-size
           ((seekable-input-stream seekable-input-stream))
  (with-slots (native-pointer)
      seekable-input-stream
    (gir:invoke (native-pointer "get_size"))))

(defmethod seekable-input-stream-get-support-zero-copy
           ((seekable-input-stream seekable-input-stream))
  (with-slots (native-pointer)
      seekable-input-stream
    (gir:invoke (native-pointer "get_support_zero_copy"))))

(defmethod seekable-input-stream-peek
           ((seekable-input-stream seekable-input-stream) n-bytes)
  (with-slots (native-pointer)
      seekable-input-stream
    (gir:invoke (native-pointer "peek") n-bytes)))

(defmethod seekable-input-stream-read-at
           ((seekable-input-stream seekable-input-stream) position n-bytes)
  (with-slots (native-pointer)
      seekable-input-stream
    (gir:invoke (native-pointer "read_at") position n-bytes)))

(defmethod seekable-input-stream-read-at-bytes
           ((seekable-input-stream seekable-input-stream) position n-bytes)
  (with-slots (native-pointer)
      seekable-input-stream
    (gir:invoke (native-pointer "read_at_bytes") position n-bytes)))

(defclass slow-file-system (file-system)
          (seed base-file-system average-latency))

(defun make-slow-file-system-new-average-latency
       (base-file-system average-latency)
  (let ((pointer
         (gir:invoke (*ns* "SlowFileSystem" "new_average_latency") base-file-system
                     average-latency)))
    (make-instance 'slow-file-system :native-pointer pointer)))

(defun make-slow-file-system-new-average-latency-and-seed
       (base-file-system average-latency seed)
  (let ((pointer
         (gir:invoke (*ns* "SlowFileSystem" "new_average_latency_and_seed")
                     base-file-system average-latency seed)))
    (make-instance 'slow-file-system :native-pointer pointer)))

(defclass sparse-union-array (gir-object) (data-type type-ids fields))

(defun make-sparse-union-array-new (type-ids fields)
  (let ((pointer (gir:invoke (*ns* "SparseUnionArray" "new") type-ids fields)))
    (make-instance 'sparse-union-array :native-pointer pointer)))

(defun make-sparse-union-array-new-data-type (data-type type-ids fields)
  (let ((pointer
         (gir:invoke (*ns* "SparseUnionArray" "new_data_type") data-type type-ids fields)))
    (make-instance 'sparse-union-array :native-pointer pointer)))

(defclass sparse-union-data-type (gir-object) (fields type-codes))

(defun make-sparse-union-data-type-new (fields type-codes)
  (let ((pointer (gir:invoke (*ns* "SparseUnionDataType" "new") fields type-codes)))
    (make-instance 'sparse-union-data-type :native-pointer pointer)))

(defclass string-array (binary-array)
          (length value-offsets data null-bitmap n-nulls))

(defun make-string-array-new (length value-offsets data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "StringArray" "new") length value-offsets data null-bitmap
                     n-nulls)))
    (make-instance 'string-array :native-pointer pointer)))

(defmethod string-array-get-string ((string-array string-array) i)
  (with-slots (native-pointer)
      string-array
    (gir:invoke (native-pointer "get_string") i)))

(defclass string-array-builder (binary-array-builder) nil)

(defun make-string-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "StringArrayBuilder" "new"))))
    (make-instance 'string-array-builder :native-pointer pointer)))

(defmethod string-array-builder-append
           ((string-array-builder string-array-builder) value)
  (with-slots (native-pointer)
      string-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod string-array-builder-append-string
           ((string-array-builder string-array-builder) value)
  (with-slots (native-pointer)
      string-array-builder
    (gir:invoke (native-pointer "append_string") value)))

(defmethod string-array-builder-append-strings
           ((string-array-builder string-array-builder) values)
  (with-slots (native-pointer)
      string-array-builder
    (gir:invoke (native-pointer "append_strings") values)))

(defmethod string-array-builder-append-value
           ((string-array-builder string-array-builder) value)
  (with-slots (native-pointer)
      string-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod string-array-builder-append-values
           ((string-array-builder string-array-builder) values)
  (with-slots (native-pointer)
      string-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass string-data-type (arrow-data-type) nil)

(defun make-string-data-type-new ()
  (let ((pointer (gir:invoke (*ns* "StringDataType" "new"))))
    (make-instance 'string-data-type :native-pointer pointer)))

(defclass struct-array (arrow-array)
          (data-type length fields null-bitmap n-nulls))

(defun make-struct-array-new (data-type length fields null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "StructArray" "new") data-type length fields null-bitmap
                     n-nulls)))
    (make-instance 'struct-array :native-pointer pointer)))

(defmethod struct-array-flatten ((struct-array struct-array))
  (with-slots (native-pointer)
      struct-array
    (gir:invoke (native-pointer "flatten"))))

(defmethod struct-array-get-field ((struct-array struct-array) i)
  (with-slots (native-pointer)
      struct-array
    (gir:invoke (native-pointer "get_field") i)))

(defmethod struct-array-get-fields ((struct-array struct-array))
  (with-slots (native-pointer)
      struct-array
    (gir:invoke (native-pointer "get_fields"))))

(defclass struct-array-builder (array-builder) (data-type))

(defun make-struct-array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "StructArrayBuilder" "new") data-type)))
    (make-instance 'struct-array-builder :native-pointer pointer)))

(defmethod struct-array-builder-append
           ((struct-array-builder struct-array-builder))
  (with-slots (native-pointer)
      struct-array-builder
    (gir:invoke (native-pointer "append"))))

(defmethod struct-array-builder-append-null
           ((struct-array-builder struct-array-builder))
  (with-slots (native-pointer)
      struct-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod struct-array-builder-append-value
           ((struct-array-builder struct-array-builder))
  (with-slots (native-pointer)
      struct-array-builder
    (gir:invoke (native-pointer "append_value"))))

(defmethod struct-array-builder-get-field-builder
           ((struct-array-builder struct-array-builder) i)
  (with-slots (native-pointer)
      struct-array-builder
    (gir:invoke (native-pointer "get_field_builder") i)))

(defmethod struct-array-builder-get-field-builders
           ((struct-array-builder struct-array-builder))
  (with-slots (native-pointer)
      struct-array-builder
    (gir:invoke (native-pointer "get_field_builders"))))

(defclass struct-data-type (arrow-data-type) (fields))

(defun make-struct-data-type-new (fields)
  (let ((pointer (gir:invoke (*ns* "StructDataType" "new") fields)))
    (make-instance 'struct-data-type :native-pointer pointer)))

(defmethod struct-data-type-get-field ((struct-data-type struct-data-type) i)
  (with-slots (native-pointer)
      struct-data-type
    (gir:invoke (native-pointer "get_field") i)))

(defmethod struct-data-type-get-field-by-name
           ((struct-data-type struct-data-type) name)
  (with-slots (native-pointer)
      struct-data-type
    (gir:invoke (native-pointer "get_field_by_name") name)))

(defmethod struct-data-type-get-field-index
           ((struct-data-type struct-data-type) name)
  (with-slots (native-pointer)
      struct-data-type
    (gir:invoke (native-pointer "get_field_index") name)))

(defmethod struct-data-type-get-fields ((struct-data-type struct-data-type))
  (with-slots (native-pointer)
      struct-data-type
    (gir:invoke (native-pointer "get_fields"))))

(defmethod struct-data-type-get-n-fields ((struct-data-type struct-data-type))
  (with-slots (native-pointer)
      struct-data-type
    (gir:invoke (native-pointer "get_n_fields"))))

(defclass sub-tree-file-system (file-system) (base-path base-file-system))

(defun make-sub-tree-file-system-new (base-path base-file-system)
  (let ((pointer (gir:invoke (*ns* "SubTreeFileSystem" "new") base-path base-file-system)))
    (make-instance 'sub-tree-file-system :native-pointer pointer)))

(defclass arrow-table (gir-object)
          (values record-batches chunked-arrays schema arrays))

(defun make-arrow-table-new-arrays (schema arrays)
  (let ((pointer (gir:invoke (*ns* "Table" "new_arrays") schema arrays)))
    (make-instance 'arrow-table :native-pointer pointer)))

(defun make-arrow-table-new-chunked-arrays (schema chunked-arrays)
  (let ((pointer
         (gir:invoke (*ns* "Table" "new_chunked_arrays") schema chunked-arrays)))
    (make-instance 'arrow-table :native-pointer pointer)))

(defun make-arrow-table-new-record-batches (schema record-batches)
  (let ((pointer
         (gir:invoke (*ns* "Table" "new_record_batches") schema record-batches)))
    (make-instance 'arrow-table :native-pointer pointer)))

(defun make-arrow-table-new-values (schema values)
  (let ((pointer (gir:invoke (*ns* "Table" "new_values") schema values)))
    (make-instance 'arrow-table :native-pointer pointer)))

(defmethod arrow-table-add-column
           ((arrow-table arrow-table) i field chunked-array)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "add_column") i field chunked-array)))

(defmethod arrow-table-combine-chunks ((arrow-table arrow-table))
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "combine_chunks"))))

(defmethod arrow-table-concatenate ((arrow-table arrow-table) other-tables)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "concatenate") other-tables)))

(defmethod arrow-table-equal ((arrow-table arrow-table) other-table)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "equal") other-table)))

(defmethod arrow-table-equal-metadata
           ((arrow-table arrow-table) other-table check-metadata)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "equal_metadata") other-table check-metadata)))

(defmethod arrow-table-filter ((arrow-table arrow-table) filter options)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "filter") filter options)))

(defmethod arrow-table-filter-chunked-array
           ((arrow-table arrow-table) filter options)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "filter_chunked_array") filter options)))

(defmethod arrow-table-get-column-data ((arrow-table arrow-table) i)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "get_column_data") i)))

(defmethod arrow-table-get-n-columns ((arrow-table arrow-table))
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "get_n_columns"))))

(defmethod arrow-table-get-n-rows ((arrow-table arrow-table))
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "get_n_rows"))))

(defmethod arrow-table-get-schema ((arrow-table arrow-table))
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "get_schema"))))

(defmethod arrow-table-remove-column ((arrow-table arrow-table) i)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "remove_column") i)))

(defmethod arrow-table-replace-column
           ((arrow-table arrow-table) i field chunked-array)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "replace_column") i field chunked-array)))

(defmethod arrow-table-slice ((arrow-table arrow-table) offset length)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "slice") offset length)))

(defmethod arrow-table-take ((arrow-table arrow-table) indices options)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "take") indices options)))

(defmethod arrow-table-take-chunked-array
           ((arrow-table arrow-table) indices options)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "take_chunked_array") indices options)))

(defmethod arrow-table-to-string ((arrow-table arrow-table))
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "to_string"))))

(defmethod arrow-table-write-as-feather
           ((arrow-table arrow-table) sink properties)
  (with-slots (native-pointer)
      arrow-table
    (gir:invoke (native-pointer "write_as_feather") sink properties)))

(defclass table-batch-reader (record-batch-reader) (table))

(defun make-table-batch-reader-new (table)
  (let ((pointer (gir:invoke (*ns* "TableBatchReader" "new") table)))
    (make-instance 'table-batch-reader :native-pointer pointer)))

(defclass take-options (gir-object) nil)

(defun make-take-options-new ()
  (let ((pointer (gir:invoke (*ns* "TakeOptions" "new"))))
    (make-instance 'take-options :native-pointer pointer)))

(defclass arrow-tensor (gir-object) (data-type data shape))

(defun make-arrow-tensor-new (data-type data shape)
  (let ((pointer (gir:invoke (*ns* "Tensor" "new") data-type data shape)))
    (make-instance 'arrow-tensor :native-pointer pointer)))

(defmethod arrow-tensor-equal ((arrow-tensor arrow-tensor) other-tensor)
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "equal") other-tensor)))

(defmethod arrow-tensor-get-buffer ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_buffer"))))

(defmethod arrow-tensor-get-dimension-name ((arrow-tensor arrow-tensor) i)
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_dimension_name") i)))

(defmethod arrow-tensor-get-n-dimensions ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_n_dimensions"))))

(defmethod arrow-tensor-get-shape ((arrow-tensor arrow-tensor) n-dimensions)
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_shape") n-dimensions)))

(defmethod arrow-tensor-get-size ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_size"))))

(defmethod arrow-tensor-get-strides ((arrow-tensor arrow-tensor) n-strides)
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_strides") n-strides)))

(defmethod arrow-tensor-get-value-data-type ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_value_data_type"))))

(defmethod arrow-tensor-get-value-type ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "get_value_type"))))

(defmethod arrow-tensor-is-column-major ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "is_column_major"))))

(defmethod arrow-tensor-is-contiguous ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "is_contiguous"))))

(defmethod arrow-tensor-is-mutable ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "is_mutable"))))

(defmethod arrow-tensor-is-row-major ((arrow-tensor arrow-tensor))
  (with-slots (native-pointer)
      arrow-tensor
    (gir:invoke (native-pointer "is_row_major"))))

(defclass time32array (numeric-array)
          (data-type length data null-bitmap n-nulls))

(defun make-time32array-new (data-type length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Time32Array" "new") data-type length data null-bitmap
                     n-nulls)))
    (make-instance 'time32array :native-pointer pointer)))

(defmethod time32array-get-value ((time32array time32array) i)
  (with-slots (native-pointer)
      time32array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod time32array-get-values ((time32array time32array) length)
  (with-slots (native-pointer)
      time32array
    (gir:invoke (native-pointer "get_values") length)))

(defclass time32array-builder (array-builder) (data-type))

(defun make-time32array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "Time32ArrayBuilder" "new") data-type)))
    (make-instance 'time32array-builder :native-pointer pointer)))

(defmethod time32array-builder-append
           ((time32array-builder time32array-builder) value)
  (with-slots (native-pointer)
      time32array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod time32array-builder-append-null
           ((time32array-builder time32array-builder))
  (with-slots (native-pointer)
      time32array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod time32array-builder-append-nulls
           ((time32array-builder time32array-builder) n)
  (with-slots (native-pointer)
      time32array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod time32array-builder-append-value
           ((time32array-builder time32array-builder) value)
  (with-slots (native-pointer)
      time32array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod time32array-builder-append-values
           ((time32array-builder time32array-builder) values)
  (with-slots (native-pointer)
      time32array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass time32data-type (gir-object) (unit))

(defun make-time32data-type-new (unit)
  (let ((pointer (gir:invoke (*ns* "Time32DataType" "new") unit)))
    (make-instance 'time32data-type :native-pointer pointer)))

(defclass time64array (numeric-array)
          (data-type length data null-bitmap n-nulls))

(defun make-time64array-new (data-type length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "Time64Array" "new") data-type length data null-bitmap
                     n-nulls)))
    (make-instance 'time64array :native-pointer pointer)))

(defmethod time64array-get-value ((time64array time64array) i)
  (with-slots (native-pointer)
      time64array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod time64array-get-values ((time64array time64array) length)
  (with-slots (native-pointer)
      time64array
    (gir:invoke (native-pointer "get_values") length)))

(defclass time64array-builder (array-builder) (data-type))

(defun make-time64array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "Time64ArrayBuilder" "new") data-type)))
    (make-instance 'time64array-builder :native-pointer pointer)))

(defmethod time64array-builder-append
           ((time64array-builder time64array-builder) value)
  (with-slots (native-pointer)
      time64array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod time64array-builder-append-null
           ((time64array-builder time64array-builder))
  (with-slots (native-pointer)
      time64array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod time64array-builder-append-nulls
           ((time64array-builder time64array-builder) n)
  (with-slots (native-pointer)
      time64array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod time64array-builder-append-value
           ((time64array-builder time64array-builder) value)
  (with-slots (native-pointer)
      time64array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod time64array-builder-append-values
           ((time64array-builder time64array-builder) values)
  (with-slots (native-pointer)
      time64array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass time64data-type (gir-object) (unit))

(defun make-time64data-type-new (unit)
  (let ((pointer (gir:invoke (*ns* "Time64DataType" "new") unit)))
    (make-instance 'time64data-type :native-pointer pointer)))

(defclass time-data-type (arrow-data-type) nil)

(defmethod time-data-type-get-unit ((time-data-type time-data-type))
  (with-slots (native-pointer)
      time-data-type
    (gir:invoke (native-pointer "get_unit"))))

(defparameter *time-unit-nano* (gir:nget *ns* "TimeUnit" :nano))
(defparameter *time-unit-micro* (gir:nget *ns* "TimeUnit" :micro))
(defparameter *time-unit-milli* (gir:nget *ns* "TimeUnit" :milli))
(defparameter *time-unit-second* (gir:nget *ns* "TimeUnit" :second))


(defclass timestamp-array (numeric-array)
          (data-type length data null-bitmap n-nulls))

(defun make-timestamp-array-new (data-type length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "TimestampArray" "new") data-type length data null-bitmap
                     n-nulls)))
    (make-instance 'timestamp-array :native-pointer pointer)))

(defmethod timestamp-array-get-value ((timestamp-array timestamp-array) i)
  (with-slots (native-pointer)
      timestamp-array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod timestamp-array-get-values
           ((timestamp-array timestamp-array) length)
  (with-slots (native-pointer)
      timestamp-array
    (gir:invoke (native-pointer "get_values") length)))

(defclass timestamp-array-builder (array-builder) (data-type))

(defun make-timestamp-array-builder-new (data-type)
  (let ((pointer (gir:invoke (*ns* "TimestampArrayBuilder" "new") data-type)))
    (make-instance 'timestamp-array-builder :native-pointer pointer)))

(defmethod timestamp-array-builder-append
           ((timestamp-array-builder timestamp-array-builder) value)
  (with-slots (native-pointer)
      timestamp-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod timestamp-array-builder-append-null
           ((timestamp-array-builder timestamp-array-builder))
  (with-slots (native-pointer)
      timestamp-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod timestamp-array-builder-append-nulls
           ((timestamp-array-builder timestamp-array-builder) n)
  (with-slots (native-pointer)
      timestamp-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod timestamp-array-builder-append-value
           ((timestamp-array-builder timestamp-array-builder) value)
  (with-slots (native-pointer)
      timestamp-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod timestamp-array-builder-append-values
           ((timestamp-array-builder timestamp-array-builder) values)
  (with-slots (native-pointer)
      timestamp-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass timestamp-data-type (arrow-data-type) (unit))

(defun make-timestamp-data-type-new (unit)
  (let ((pointer (gir:invoke (*ns* "TimestampDataType" "new") unit)))
    (make-instance 'timestamp-data-type :native-pointer pointer)))

(defmethod timestamp-data-type-get-unit
           ((timestamp-data-type timestamp-data-type))
  (with-slots (native-pointer)
      timestamp-data-type
    (gir:invoke (native-pointer "get_unit"))))

(defparameter *type-large-list* (gir:nget *ns* "Type" :large_list))
(defparameter *type-large-binary* (gir:nget *ns* "Type" :large_binary))
(defparameter *type-large-string* (gir:nget *ns* "Type" :large_string))
(defparameter *type-duration* (gir:nget *ns* "Type" :duration))
(defparameter *type-fixed-size-list* (gir:nget *ns* "Type" :fixed_size_list))
(defparameter *type-extension* (gir:nget *ns* "Type" :extension))
(defparameter *type-map* (gir:nget *ns* "Type" :map))
(defparameter *type-dictionary* (gir:nget *ns* "Type" :dictionary))
(defparameter *type-union* (gir:nget *ns* "Type" :union))
(defparameter *type-struct* (gir:nget *ns* "Type" :struct))
(defparameter *type-list* (gir:nget *ns* "Type" :list))
(defparameter *type-decimal* (gir:nget *ns* "Type" :decimal))
(defparameter *type-interval* (gir:nget *ns* "Type" :interval))
(defparameter *type-time64* (gir:nget *ns* "Type" :time64))
(defparameter *type-time32* (gir:nget *ns* "Type" :time32))
(defparameter *type-timestamp* (gir:nget *ns* "Type" :timestamp))
(defparameter *type-date64* (gir:nget *ns* "Type" :date64))
(defparameter *type-date32* (gir:nget *ns* "Type" :date32))
(defparameter *type-fixed-size-binary* (gir:nget *ns* "Type" :fixed_size_binary))
(defparameter *type-binary* (gir:nget *ns* "Type" :binary))
(defparameter *type-string* (gir:nget *ns* "Type" :string))
(defparameter *type-double* (gir:nget *ns* "Type" :double))
(defparameter *type-float* (gir:nget *ns* "Type" :float))
(defparameter *type-half-float* (gir:nget *ns* "Type" :half_float))
(defparameter *type-int64* (gir:nget *ns* "Type" :int64))
(defparameter *type-uint64* (gir:nget *ns* "Type" :uint64))
(defparameter *type-int32* (gir:nget *ns* "Type" :int32))
(defparameter *type-uint32* (gir:nget *ns* "Type" :uint32))
(defparameter *type-int16* (gir:nget *ns* "Type" :int16))
(defparameter *type-uint16* (gir:nget *ns* "Type" :uint16))
(defparameter *type-int8* (gir:nget *ns* "Type" :int8))
(defparameter *type-uint8* (gir:nget *ns* "Type" :uint8))
(defparameter *type-boolean* (gir:nget *ns* "Type" :boolean))
(defparameter *type-na* (gir:nget *ns* "Type" :na))


(defclass uint16array (numeric-array) (length data null-bitmap n-nulls))

(defun make-uint16array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "UInt16Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'uint16array :native-pointer pointer)))

(defmethod uint16array-compare ((uint16array uint16array) value options)
  (with-slots (native-pointer)
      uint16array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod uint16array-get-value ((uint16array uint16array) i)
  (with-slots (native-pointer)
      uint16array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod uint16array-get-values ((uint16array uint16array) length)
  (with-slots (native-pointer)
      uint16array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod uint16array-sum ((uint16array uint16array))
  (with-slots (native-pointer)
      uint16array
    (gir:invoke (native-pointer "sum"))))

(defclass uint16array-builder (array-builder) nil)

(defun make-uint16array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "UInt16ArrayBuilder" "new"))))
    (make-instance 'uint16array-builder :native-pointer pointer)))

(defmethod uint16array-builder-append
           ((uint16array-builder uint16array-builder) value)
  (with-slots (native-pointer)
      uint16array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod uint16array-builder-append-null
           ((uint16array-builder uint16array-builder))
  (with-slots (native-pointer)
      uint16array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod uint16array-builder-append-nulls
           ((uint16array-builder uint16array-builder) n)
  (with-slots (native-pointer)
      uint16array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod uint16array-builder-append-value
           ((uint16array-builder uint16array-builder) value)
  (with-slots (native-pointer)
      uint16array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod uint16array-builder-append-values
           ((uint16array-builder uint16array-builder) values)
  (with-slots (native-pointer)
      uint16array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass uint16data-type (integer-data-type) nil)

(defun make-uint16data-type-new ()
  (let ((pointer (gir:invoke (*ns* "UInt16DataType" "new"))))
    (make-instance 'uint16data-type :native-pointer pointer)))

(defclass uint32array (numeric-array) (length data null-bitmap n-nulls))

(defun make-uint32array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "UInt32Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'uint32array :native-pointer pointer)))

(defmethod uint32array-compare ((uint32array uint32array) value options)
  (with-slots (native-pointer)
      uint32array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod uint32array-get-value ((uint32array uint32array) i)
  (with-slots (native-pointer)
      uint32array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod uint32array-get-values ((uint32array uint32array) length)
  (with-slots (native-pointer)
      uint32array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod uint32array-sum ((uint32array uint32array))
  (with-slots (native-pointer)
      uint32array
    (gir:invoke (native-pointer "sum"))))

(defclass uint32array-builder (array-builder) nil)

(defun make-uint32array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "UInt32ArrayBuilder" "new"))))
    (make-instance 'uint32array-builder :native-pointer pointer)))

(defmethod uint32array-builder-append
           ((uint32array-builder uint32array-builder) value)
  (with-slots (native-pointer)
      uint32array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod uint32array-builder-append-null
           ((uint32array-builder uint32array-builder))
  (with-slots (native-pointer)
      uint32array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod uint32array-builder-append-nulls
           ((uint32array-builder uint32array-builder) n)
  (with-slots (native-pointer)
      uint32array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod uint32array-builder-append-value
           ((uint32array-builder uint32array-builder) value)
  (with-slots (native-pointer)
      uint32array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod uint32array-builder-append-values
           ((uint32array-builder uint32array-builder) values)
  (with-slots (native-pointer)
      uint32array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass uint32data-type (integer-data-type) nil)

(defun make-uint32data-type-new ()
  (let ((pointer (gir:invoke (*ns* "UInt32DataType" "new"))))
    (make-instance 'uint32data-type :native-pointer pointer)))

(defclass uint64array (numeric-array) (length data null-bitmap n-nulls))

(defun make-uint64array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "UInt64Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'uint64array :native-pointer pointer)))

(defmethod uint64array-compare ((uint64array uint64array) value options)
  (with-slots (native-pointer)
      uint64array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod uint64array-get-value ((uint64array uint64array) i)
  (with-slots (native-pointer)
      uint64array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod uint64array-get-values ((uint64array uint64array) length)
  (with-slots (native-pointer)
      uint64array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod uint64array-sum ((uint64array uint64array))
  (with-slots (native-pointer)
      uint64array
    (gir:invoke (native-pointer "sum"))))

(defclass uint64array-builder (array-builder) nil)

(defun make-uint64array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "UInt64ArrayBuilder" "new"))))
    (make-instance 'uint64array-builder :native-pointer pointer)))

(defmethod uint64array-builder-append
           ((uint64array-builder uint64array-builder) value)
  (with-slots (native-pointer)
      uint64array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod uint64array-builder-append-null
           ((uint64array-builder uint64array-builder))
  (with-slots (native-pointer)
      uint64array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod uint64array-builder-append-nulls
           ((uint64array-builder uint64array-builder) n)
  (with-slots (native-pointer)
      uint64array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod uint64array-builder-append-value
           ((uint64array-builder uint64array-builder) value)
  (with-slots (native-pointer)
      uint64array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod uint64array-builder-append-values
           ((uint64array-builder uint64array-builder) values)
  (with-slots (native-pointer)
      uint64array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass uint64data-type (integer-data-type) nil)

(defun make-uint64data-type-new ()
  (let ((pointer (gir:invoke (*ns* "UInt64DataType" "new"))))
    (make-instance 'uint64data-type :native-pointer pointer)))

(defclass uint8array (numeric-array) (length data null-bitmap n-nulls))

(defun make-uint8array-new (length data null-bitmap n-nulls)
  (let ((pointer
         (gir:invoke (*ns* "UInt8Array" "new") length data null-bitmap n-nulls)))
    (make-instance 'uint8array :native-pointer pointer)))

(defmethod uint8array-compare ((uint8array uint8array) value options)
  (with-slots (native-pointer)
      uint8array
    (gir:invoke (native-pointer "compare") value options)))

(defmethod uint8array-get-value ((uint8array uint8array) i)
  (with-slots (native-pointer)
      uint8array
    (gir:invoke (native-pointer "get_value") i)))

(defmethod uint8array-get-values ((uint8array uint8array) length)
  (with-slots (native-pointer)
      uint8array
    (gir:invoke (native-pointer "get_values") length)))

(defmethod uint8array-sum ((uint8array uint8array))
  (with-slots (native-pointer)
      uint8array
    (gir:invoke (native-pointer "sum"))))

(defclass uint8array-builder (array-builder) nil)

(defun make-uint8array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "UInt8ArrayBuilder" "new"))))
    (make-instance 'uint8array-builder :native-pointer pointer)))

(defmethod uint8array-builder-append
           ((uint8array-builder uint8array-builder) value)
  (with-slots (native-pointer)
      uint8array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod uint8array-builder-append-null
           ((uint8array-builder uint8array-builder))
  (with-slots (native-pointer)
      uint8array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod uint8array-builder-append-nulls
           ((uint8array-builder uint8array-builder) n)
  (with-slots (native-pointer)
      uint8array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod uint8array-builder-append-value
           ((uint8array-builder uint8array-builder) value)
  (with-slots (native-pointer)
      uint8array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod uint8array-builder-append-values
           ((uint8array-builder uint8array-builder) values)
  (with-slots (native-pointer)
      uint8array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass uint8data-type (integer-data-type) nil)

(defun make-uint8data-type-new ()
  (let ((pointer (gir:invoke (*ns* "UInt8DataType" "new"))))
    (make-instance 'uint8data-type :native-pointer pointer)))

(defclass uint-array-builder (array-builder) nil)

(defun make-uint-array-builder-new ()
  (let ((pointer (gir:invoke (*ns* "UIntArrayBuilder" "new"))))
    (make-instance 'uint-array-builder :native-pointer pointer)))

(defmethod uint-array-builder-append
           ((uint-array-builder uint-array-builder) value)
  (with-slots (native-pointer)
      uint-array-builder
    (gir:invoke (native-pointer "append") value)))

(defmethod uint-array-builder-append-null
           ((uint-array-builder uint-array-builder))
  (with-slots (native-pointer)
      uint-array-builder
    (gir:invoke (native-pointer "append_null"))))

(defmethod uint-array-builder-append-nulls
           ((uint-array-builder uint-array-builder) n)
  (with-slots (native-pointer)
      uint-array-builder
    (gir:invoke (native-pointer "append_nulls") n)))

(defmethod uint-array-builder-append-value
           ((uint-array-builder uint-array-builder) value)
  (with-slots (native-pointer)
      uint-array-builder
    (gir:invoke (native-pointer "append_value") value)))

(defmethod uint-array-builder-append-values
           ((uint-array-builder uint-array-builder) values)
  (with-slots (native-pointer)
      uint-array-builder
    (gir:invoke (native-pointer "append_values") values)))

(defclass union-array (arrow-array) nil)

(defmethod union-array-get-field ((union-array union-array) i)
  (with-slots (native-pointer)
      union-array
    (gir:invoke (native-pointer "get_field") i)))

(defclass union-data-type (arrow-data-type) nil)

(defmethod union-data-type-get-field ((union-data-type union-data-type) i)
  (with-slots (native-pointer)
      union-data-type
    (gir:invoke (native-pointer "get_field") i)))

(defmethod union-data-type-get-fields ((union-data-type union-data-type))
  (with-slots (native-pointer)
      union-data-type
    (gir:invoke (native-pointer "get_fields"))))

(defmethod union-data-type-get-n-fields ((union-data-type union-data-type))
  (with-slots (native-pointer)
      union-data-type
    (gir:invoke (native-pointer "get_n_fields"))))

(defmethod union-data-type-get-type-codes
           ((union-data-type union-data-type) n-type-codes)
  (with-slots (native-pointer)
      union-data-type
    (gir:invoke (native-pointer "get_type_codes") n-type-codes)))

